{
  "functions": [
    {
      "name": "InitWindow",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "title",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Initialize window and OpenGL context",
      "custom": false
    },
    {
      "name": "WindowShouldClose",
      "params": [],
      "returnType": "bool",
      "description": "Check if KEY_ESCAPE pressed or Close icon pressed",
      "custom": false
    },
    {
      "name": "CloseWindow",
      "params": [],
      "returnType": "void",
      "description": "Close window and unload OpenGL context",
      "custom": false
    },
    {
      "name": "IsWindowReady",
      "params": [],
      "returnType": "bool",
      "description": "Check if window has been initialized successfully",
      "custom": false
    },
    {
      "name": "IsWindowFullscreen",
      "params": [],
      "returnType": "bool",
      "description": "Check if window is currently fullscreen",
      "custom": false
    },
    {
      "name": "IsWindowHidden",
      "params": [],
      "returnType": "bool",
      "description": "Check if window is currently hidden (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "IsWindowMinimized",
      "params": [],
      "returnType": "bool",
      "description": "Check if window is currently minimized (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "IsWindowMaximized",
      "params": [],
      "returnType": "bool",
      "description": "Check if window is currently maximized (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "IsWindowFocused",
      "params": [],
      "returnType": "bool",
      "description": "Check if window is currently focused (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "IsWindowResized",
      "params": [],
      "returnType": "bool",
      "description": "Check if window has been resized last frame",
      "custom": false
    },
    {
      "name": "IsWindowState",
      "params": [
        {
          "name": "flag",
          "typ": "u32"
        }
      ],
      "returnType": "bool",
      "description": "Check if one specific window flag is enabled",
      "custom": false
    },
    {
      "name": "SetWindowState",
      "params": [
        {
          "name": "flags",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Set window configuration state using flags (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "ClearWindowState",
      "params": [
        {
          "name": "flags",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Clear window configuration state flags",
      "custom": false
    },
    {
      "name": "ToggleFullscreen",
      "params": [],
      "returnType": "void",
      "description": "Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "ToggleBorderlessWindowed",
      "params": [],
      "returnType": "void",
      "description": "Toggle window state: borderless windowed (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "MaximizeWindow",
      "params": [],
      "returnType": "void",
      "description": "Set window state: maximized, if resizable (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "MinimizeWindow",
      "params": [],
      "returnType": "void",
      "description": "Set window state: minimized, if resizable (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "RestoreWindow",
      "params": [],
      "returnType": "void",
      "description": "Set window state: not minimized/maximized (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "SetWindowIcon",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "void",
      "description": "Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "SetWindowIcons",
      "params": [
        {
          "name": "images",
          "typ": "*Image"
        },
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "SetWindowTitle",
      "params": [
        {
          "name": "title",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)",
      "custom": false
    },
    {
      "name": "SetWindowPosition",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set window position on screen (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "SetWindowMonitor",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set monitor for the current window",
      "custom": false
    },
    {
      "name": "SetWindowMinSize",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)",
      "custom": false
    },
    {
      "name": "SetWindowSize",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set window dimensions",
      "custom": false
    },
    {
      "name": "SetWindowOpacity",
      "params": [
        {
          "name": "opacity",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "SetWindowFocused",
      "params": [],
      "returnType": "void",
      "description": "Set window focused (only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "GetWindowHandle",
      "params": [],
      "returnType": "*anyopaque",
      "description": "Get native window handle",
      "custom": false
    },
    {
      "name": "GetScreenWidth",
      "params": [],
      "returnType": "i32",
      "description": "Get current screen width",
      "custom": false
    },
    {
      "name": "GetScreenHeight",
      "params": [],
      "returnType": "i32",
      "description": "Get current screen height",
      "custom": false
    },
    {
      "name": "GetRenderWidth",
      "params": [],
      "returnType": "i32",
      "description": "Get current render width (it considers HiDPI)",
      "custom": false
    },
    {
      "name": "GetRenderHeight",
      "params": [],
      "returnType": "i32",
      "description": "Get current render height (it considers HiDPI)",
      "custom": false
    },
    {
      "name": "GetMonitorCount",
      "params": [],
      "returnType": "i32",
      "description": "Get number of connected monitors",
      "custom": false
    },
    {
      "name": "GetCurrentMonitor",
      "params": [],
      "returnType": "i32",
      "description": "Get current connected monitor",
      "custom": false
    },
    {
      "name": "GetMonitorPosition",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "Vector2",
      "description": "Get specified monitor position",
      "custom": false
    },
    {
      "name": "GetMonitorWidth",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get specified monitor width (current video mode used by monitor)",
      "custom": false
    },
    {
      "name": "GetMonitorHeight",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get specified monitor height (current video mode used by monitor)",
      "custom": false
    },
    {
      "name": "GetMonitorPhysicalWidth",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get specified monitor physical width in millimetres",
      "custom": false
    },
    {
      "name": "GetMonitorPhysicalHeight",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get specified monitor physical height in millimetres",
      "custom": false
    },
    {
      "name": "GetMonitorRefreshRate",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get specified monitor refresh rate",
      "custom": false
    },
    {
      "name": "GetWindowPosition",
      "params": [],
      "returnType": "Vector2",
      "description": "Get window position XY on monitor",
      "custom": false
    },
    {
      "name": "GetWindowScaleDPI",
      "params": [],
      "returnType": "Vector2",
      "description": "Get window scale DPI factor",
      "custom": false
    },
    {
      "name": "GetMonitorName",
      "params": [
        {
          "name": "monitor",
          "typ": "i32"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get the human-readable, UTF-8 encoded name of the specified monitor",
      "custom": false
    },
    {
      "name": "SetClipboardText",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Set clipboard text content",
      "custom": false
    },
    {
      "name": "GetClipboardText",
      "params": [],
      "returnType": "[*:0]const u8",
      "description": "Get clipboard text content",
      "custom": false
    },
    {
      "name": "EnableEventWaiting",
      "params": [],
      "returnType": "void",
      "description": "Enable waiting for events on EndDrawing(), no automatic event polling",
      "custom": false
    },
    {
      "name": "DisableEventWaiting",
      "params": [],
      "returnType": "void",
      "description": "Disable waiting for events on EndDrawing(), automatic events polling",
      "custom": false
    },
    {
      "name": "SwapScreenBuffer",
      "params": [],
      "returnType": "void",
      "description": "Swap back buffer with front buffer (screen drawing)",
      "custom": false
    },
    {
      "name": "PollInputEvents",
      "params": [],
      "returnType": "void",
      "description": "Register all input events",
      "custom": false
    },
    {
      "name": "WaitTime",
      "params": [
        {
          "name": "seconds",
          "typ": "f64"
        }
      ],
      "returnType": "void",
      "description": "Wait for some time (halt program execution)",
      "custom": false
    },
    {
      "name": "ShowCursor",
      "params": [],
      "returnType": "void",
      "description": "Shows cursor",
      "custom": false
    },
    {
      "name": "HideCursor",
      "params": [],
      "returnType": "void",
      "description": "Hides cursor",
      "custom": false
    },
    {
      "name": "IsCursorHidden",
      "params": [],
      "returnType": "bool",
      "description": "Check if cursor is not visible",
      "custom": false
    },
    {
      "name": "EnableCursor",
      "params": [],
      "returnType": "void",
      "description": "Enables cursor (unlock cursor)",
      "custom": false
    },
    {
      "name": "DisableCursor",
      "params": [],
      "returnType": "void",
      "description": "Disables cursor (lock cursor)",
      "custom": false
    },
    {
      "name": "IsCursorOnScreen",
      "params": [],
      "returnType": "bool",
      "description": "Check if cursor is on the screen",
      "custom": false
    },
    {
      "name": "ClearBackground",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Set background color (framebuffer clear color)",
      "custom": false
    },
    {
      "name": "BeginDrawing",
      "params": [],
      "returnType": "void",
      "description": "Setup canvas (framebuffer) to start drawing",
      "custom": false
    },
    {
      "name": "EndDrawing",
      "params": [],
      "returnType": "void",
      "description": "End canvas drawing and swap buffers (double buffering)",
      "custom": false
    },
    {
      "name": "BeginMode2D",
      "params": [
        {
          "name": "camera",
          "typ": "Camera2D"
        }
      ],
      "returnType": "void",
      "description": "Begin 2D mode with custom camera (2D)",
      "custom": false
    },
    {
      "name": "EndMode2D",
      "params": [],
      "returnType": "void",
      "description": "Ends 2D mode with custom camera",
      "custom": false
    },
    {
      "name": "BeginMode3D",
      "params": [
        {
          "name": "camera",
          "typ": "Camera3D"
        }
      ],
      "returnType": "void",
      "description": "Begin 3D mode with custom camera (3D)",
      "custom": false
    },
    {
      "name": "EndMode3D",
      "params": [],
      "returnType": "void",
      "description": "Ends 3D mode and returns to default 2D orthographic mode",
      "custom": false
    },
    {
      "name": "BeginTextureMode",
      "params": [
        {
          "name": "target",
          "typ": "RenderTexture2D"
        }
      ],
      "returnType": "void",
      "description": "Begin drawing to render texture",
      "custom": false
    },
    {
      "name": "EndTextureMode",
      "params": [],
      "returnType": "void",
      "description": "Ends drawing to render texture",
      "custom": false
    },
    {
      "name": "BeginShaderMode",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        }
      ],
      "returnType": "void",
      "description": "Begin custom shader drawing",
      "custom": false
    },
    {
      "name": "EndShaderMode",
      "params": [],
      "returnType": "void",
      "description": "End custom shader drawing (use default shader)",
      "custom": false
    },
    {
      "name": "BeginBlendMode",
      "params": [
        {
          "name": "mode",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Begin blending mode (alpha, additive, multiplied, subtract, custom)",
      "custom": false
    },
    {
      "name": "EndBlendMode",
      "params": [],
      "returnType": "void",
      "description": "End blending mode (reset to default: alpha blending)",
      "custom": false
    },
    {
      "name": "BeginScissorMode",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Begin scissor mode (define screen area for following drawing)",
      "custom": false
    },
    {
      "name": "EndScissorMode",
      "params": [],
      "returnType": "void",
      "description": "End scissor mode",
      "custom": false
    },
    {
      "name": "BeginVrStereoMode",
      "params": [
        {
          "name": "config",
          "typ": "VrStereoConfig"
        }
      ],
      "returnType": "void",
      "description": "Begin stereo rendering (requires VR simulator)",
      "custom": false
    },
    {
      "name": "EndVrStereoMode",
      "params": [],
      "returnType": "void",
      "description": "End stereo rendering (requires VR simulator)",
      "custom": false
    },
    {
      "name": "LoadVrStereoConfig",
      "params": [
        {
          "name": "device",
          "typ": "VrDeviceInfo"
        }
      ],
      "returnType": "VrStereoConfig",
      "description": "Load VR stereo config for VR simulator device parameters",
      "custom": false
    },
    {
      "name": "UnloadVrStereoConfig",
      "params": [
        {
          "name": "config",
          "typ": "VrStereoConfig"
        }
      ],
      "returnType": "void",
      "description": "Unload VR stereo config",
      "custom": false
    },
    {
      "name": "LoadShader",
      "params": [
        {
          "name": "vsFileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fsFileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Shader",
      "description": "Load shader from files and bind default locations",
      "custom": false
    },
    {
      "name": "LoadShaderFromMemory",
      "params": [
        {
          "name": "vsCode",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fsCode",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Shader",
      "description": "Load shader from code strings and bind default locations",
      "custom": false
    },
    {
      "name": "IsShaderReady",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        }
      ],
      "returnType": "bool",
      "description": "Check if a shader is ready",
      "custom": false
    },
    {
      "name": "GetShaderLocation",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "uniformName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get shader uniform location",
      "custom": false
    },
    {
      "name": "GetShaderLocationAttrib",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "attribName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get shader attribute location",
      "custom": false
    },
    {
      "name": "SetShaderValue",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "*const anyopaque"
        },
        {
          "name": "uniformType",
          "typ": "ShaderUniformDataType"
        }
      ],
      "returnType": "void",
      "description": "Set shader uniform value",
      "custom": true
    },
    {
      "name": "SetShaderValueV",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "*const anyopaque"
        },
        {
          "name": "uniformType",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set shader uniform value vector",
      "custom": false
    },
    {
      "name": "SetShaderValueMatrix",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set shader uniform value (matrix 4x4)",
      "custom": false
    },
    {
      "name": "SetShaderValueTexture",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        },
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "texture",
          "typ": "Texture2D"
        }
      ],
      "returnType": "void",
      "description": "Set shader uniform value for texture (sampler2d)",
      "custom": false
    },
    {
      "name": "UnloadShader",
      "params": [
        {
          "name": "shader",
          "typ": "Shader"
        }
      ],
      "returnType": "void",
      "description": "Unload shader from GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "GetMouseRay",
      "params": [
        {
          "name": "mousePosition",
          "typ": "Vector2"
        },
        {
          "name": "camera",
          "typ": "Camera3D"
        }
      ],
      "returnType": "Ray",
      "description": "Get a ray trace from mouse position",
      "custom": false
    },
    {
      "name": "GetCameraMatrix",
      "params": [
        {
          "name": "camera",
          "typ": "Camera3D"
        }
      ],
      "returnType": "Matrix",
      "description": "Get camera transform matrix (view matrix)",
      "custom": false
    },
    {
      "name": "GetCameraMatrix2D",
      "params": [
        {
          "name": "camera",
          "typ": "Camera2D"
        }
      ],
      "returnType": "Matrix",
      "description": "Get camera 2d transform matrix",
      "custom": false
    },
    {
      "name": "GetWorldToScreen",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "camera",
          "typ": "Camera3D"
        }
      ],
      "returnType": "Vector2",
      "description": "Get the screen space position for a 3d world space position",
      "custom": false
    },
    {
      "name": "GetScreenToWorld2D",
      "params": [
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "camera",
          "typ": "Camera2D"
        }
      ],
      "returnType": "Vector2",
      "description": "Get the world space position for a 2d camera screen space position",
      "custom": false
    },
    {
      "name": "GetWorldToScreenEx",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "camera",
          "typ": "Camera3D"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "Vector2",
      "description": "Get size position for a 3d world space position",
      "custom": false
    },
    {
      "name": "GetWorldToScreen2D",
      "params": [
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "camera",
          "typ": "Camera2D"
        }
      ],
      "returnType": "Vector2",
      "description": "Get the screen space position for a 2d camera world space position",
      "custom": false
    },
    {
      "name": "SetTargetFPS",
      "params": [
        {
          "name": "fps",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set target FPS (maximum)",
      "custom": false
    },
    {
      "name": "GetFPS",
      "params": [],
      "returnType": "i32",
      "description": "Get current FPS",
      "custom": false
    },
    {
      "name": "GetFrameTime",
      "params": [],
      "returnType": "f32",
      "description": "Get time in seconds for last frame drawn (delta time)",
      "custom": false
    },
    {
      "name": "GetTime",
      "params": [],
      "returnType": "f64",
      "description": "Get elapsed time in seconds since InitWindow()",
      "custom": false
    },
    {
      "name": "GetRandomValue",
      "params": [
        {
          "name": "min",
          "typ": "i32"
        },
        {
          "name": "max",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get a random value between min and max (both included)",
      "custom": false
    },
    {
      "name": "SetRandomSeed",
      "params": [
        {
          "name": "seed",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Set the seed for the random number generator",
      "custom": false
    },
    {
      "name": "TakeScreenshot",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Takes a screenshot of current screen (filename extension defines format)",
      "custom": false
    },
    {
      "name": "SetConfigFlags",
      "params": [
        {
          "name": "flags",
          "typ": "ConfigFlags"
        }
      ],
      "returnType": "void",
      "description": "Setup init configuration flags (view FLAGS)",
      "custom": true
    },
    {
      "name": "TraceLog",
      "params": [
        {
          "name": "logLevel",
          "typ": "i32"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)",
      "custom": true
    },
    {
      "name": "SetTraceLogLevel",
      "params": [
        {
          "name": "logLevel",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set the current threshold (minimum) log level",
      "custom": false
    },
    {
      "name": "MemAlloc",
      "params": [
        {
          "name": "size",
          "typ": "u32"
        }
      ],
      "returnType": "*anyopaque",
      "description": "Internal memory allocator",
      "custom": false
    },
    {
      "name": "MemRealloc",
      "params": [
        {
          "name": "ptr",
          "typ": "*anyopaque"
        },
        {
          "name": "size",
          "typ": "u32"
        }
      ],
      "returnType": "*anyopaque",
      "description": "Internal memory reallocator",
      "custom": false
    },
    {
      "name": "MemFree",
      "params": [
        {
          "name": "ptr",
          "typ": "*anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Internal memory free",
      "custom": false
    },
    {
      "name": "OpenURL",
      "params": [
        {
          "name": "url",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "void",
      "description": "Open URL with default system browser (if available)",
      "custom": false
    },
    {
      "name": "SetTraceLogCallback",
      "params": [
        {
          "name": "callback",
          "typ": "TraceLogCallback"
        }
      ],
      "returnType": "void",
      "description": "Set custom trace log",
      "custom": false
    },
    {
      "name": "SetLoadFileDataCallback",
      "params": [
        {
          "name": "callback",
          "typ": "LoadFileDataCallback"
        }
      ],
      "returnType": "void",
      "description": "Set custom file binary data loader",
      "custom": false
    },
    {
      "name": "SetSaveFileDataCallback",
      "params": [
        {
          "name": "callback",
          "typ": "SaveFileDataCallback"
        }
      ],
      "returnType": "void",
      "description": "Set custom file binary data saver",
      "custom": false
    },
    {
      "name": "SetLoadFileTextCallback",
      "params": [
        {
          "name": "callback",
          "typ": "LoadFileTextCallback"
        }
      ],
      "returnType": "void",
      "description": "Set custom file text data loader",
      "custom": false
    },
    {
      "name": "SetSaveFileTextCallback",
      "params": [
        {
          "name": "callback",
          "typ": "SaveFileTextCallback"
        }
      ],
      "returnType": "void",
      "description": "Set custom file text data saver",
      "custom": false
    },
    {
      "name": "LoadFileData",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Load file data as byte array (read)",
      "custom": false
    },
    {
      "name": "UnloadFileData",
      "params": [
        {
          "name": "data",
          "typ": "?[*]u8"
        }
      ],
      "returnType": "void",
      "description": "Unload file data allocated by LoadFileData()",
      "custom": false
    },
    {
      "name": "SaveFileData",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "data",
          "typ": "*anyopaque"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Save data to file from byte array (write), returns true on success",
      "custom": false
    },
    {
      "name": "ExportDataAsCode",
      "params": [
        {
          "name": "data",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export data to code (.h), returns true on success",
      "custom": false
    },
    {
      "name": "LoadFileText",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Load text data from file (read), returns a '\\0' terminated string",
      "custom": false
    },
    {
      "name": "UnloadFileText",
      "params": [
        {
          "name": "text",
          "typ": "?[*]u8"
        }
      ],
      "returnType": "void",
      "description": "Unload file text data allocated by LoadFileText()",
      "custom": false
    },
    {
      "name": "SaveFileText",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "text",
          "typ": "?[*]u8"
        }
      ],
      "returnType": "bool",
      "description": "Save text data to file (write), string must be '\\0' terminated, returns true on success",
      "custom": false
    },
    {
      "name": "FileExists",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Check if file exists",
      "custom": false
    },
    {
      "name": "DirectoryExists",
      "params": [
        {
          "name": "dirPath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Check if a directory path exists",
      "custom": false
    },
    {
      "name": "IsFileExtension",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "ext",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Check file extension (including point: .png, .wav)",
      "custom": false
    },
    {
      "name": "GetFileLength",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)",
      "custom": false
    },
    {
      "name": "GetFileExtension",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get pointer to extension for a filename string (includes dot: '.png')",
      "custom": false
    },
    {
      "name": "GetFileName",
      "params": [
        {
          "name": "filePath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get pointer to filename for a path string",
      "custom": false
    },
    {
      "name": "GetFileNameWithoutExt",
      "params": [
        {
          "name": "filePath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get filename string without extension (uses static string)",
      "custom": false
    },
    {
      "name": "GetDirectoryPath",
      "params": [
        {
          "name": "filePath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get full path for a given fileName with path (uses static string)",
      "custom": false
    },
    {
      "name": "GetPrevDirectoryPath",
      "params": [
        {
          "name": "dirPath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get previous directory path for a given path (uses static string)",
      "custom": false
    },
    {
      "name": "GetWorkingDirectory",
      "params": [],
      "returnType": "[*:0]const u8",
      "description": "Get current working directory (uses static string)",
      "custom": false
    },
    {
      "name": "GetApplicationDirectory",
      "params": [],
      "returnType": "[*:0]const u8",
      "description": "Get the directory if the running application (uses static string)",
      "custom": false
    },
    {
      "name": "ChangeDirectory",
      "params": [
        {
          "name": "dir",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Change working directory, return true on success",
      "custom": false
    },
    {
      "name": "IsPathFile",
      "params": [
        {
          "name": "path",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Check if a given path is a file or a directory",
      "custom": false
    },
    {
      "name": "LoadDirectoryFiles",
      "params": [
        {
          "name": "dirPath",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "FilePathList",
      "description": "Load directory filepaths",
      "custom": false
    },
    {
      "name": "LoadDirectoryFilesEx",
      "params": [
        {
          "name": "basePath",
          "typ": "[*:0]const u8"
        },
        {
          "name": "filter",
          "typ": "[*:0]const u8"
        },
        {
          "name": "scanSubdirs",
          "typ": "bool"
        }
      ],
      "returnType": "FilePathList",
      "description": "Load directory filepaths with extension filtering and recursive directory scan",
      "custom": false
    },
    {
      "name": "UnloadDirectoryFiles",
      "params": [
        {
          "name": "files",
          "typ": "FilePathList"
        }
      ],
      "returnType": "void",
      "description": "Unload filepaths",
      "custom": false
    },
    {
      "name": "IsFileDropped",
      "params": [],
      "returnType": "bool",
      "description": "Check if a file has been dropped into window",
      "custom": false
    },
    {
      "name": "LoadDroppedFiles",
      "params": [],
      "returnType": "FilePathList",
      "description": "Load dropped filepaths",
      "custom": false
    },
    {
      "name": "UnloadDroppedFiles",
      "params": [
        {
          "name": "files",
          "typ": "FilePathList"
        }
      ],
      "returnType": "void",
      "description": "Unload dropped filepaths",
      "custom": false
    },
    {
      "name": "GetFileModTime",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i64",
      "description": "Get file modification time (last write time)",
      "custom": false
    },
    {
      "name": "CompressData",
      "params": [
        {
          "name": "data",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "compDataSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Compress data (DEFLATE algorithm), memory must be MemFree()",
      "custom": false
    },
    {
      "name": "DecompressData",
      "params": [
        {
          "name": "compData",
          "typ": "[*:0]const u8"
        },
        {
          "name": "compDataSize",
          "typ": "i32"
        },
        {
          "name": "dataSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Decompress data (DEFLATE algorithm), memory must be MemFree()",
      "custom": false
    },
    {
      "name": "EncodeDataBase64",
      "params": [
        {
          "name": "data",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "outputSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Encode data to Base64 string, memory must be MemFree()",
      "custom": false
    },
    {
      "name": "DecodeDataBase64",
      "params": [
        {
          "name": "data",
          "typ": "[*:0]const u8"
        },
        {
          "name": "outputSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Decode Base64 string data, memory must be MemFree()",
      "custom": false
    },
    {
      "name": "IsKeyPressed",
      "params": [
        {
          "name": "key",
          "typ": "KeyboardKey"
        }
      ],
      "returnType": "bool",
      "description": "Check if a key has been pressed once",
      "custom": true
    },
    {
      "name": "IsKeyPressedRepeat",
      "params": [
        {
          "name": "key",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check if a key has been pressed again (Only PLATFORM_DESKTOP)",
      "custom": false
    },
    {
      "name": "IsKeyDown",
      "params": [
        {
          "name": "key",
          "typ": "KeyboardKey"
        }
      ],
      "returnType": "bool",
      "description": "Check if a key is being pressed",
      "custom": true
    },
    {
      "name": "IsKeyReleased",
      "params": [
        {
          "name": "key",
          "typ": "KeyboardKey"
        }
      ],
      "returnType": "bool",
      "description": "Check if a key has been released once",
      "custom": true
    },
    {
      "name": "IsKeyUp",
      "params": [
        {
          "name": "key",
          "typ": "KeyboardKey"
        }
      ],
      "returnType": "bool",
      "description": "Check if a key is NOT being pressed",
      "custom": true
    },
    {
      "name": "SetExitKey",
      "params": [
        {
          "name": "key",
          "typ": "KeyboardKey"
        }
      ],
      "returnType": "void",
      "description": "Set a custom key to exit program (default is ESC)",
      "custom": true
    },
    {
      "name": "GetKeyPressed",
      "params": [],
      "returnType": "i32",
      "description": "Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty",
      "custom": false
    },
    {
      "name": "GetCharPressed",
      "params": [],
      "returnType": "i32",
      "description": "Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty",
      "custom": false
    },
    {
      "name": "IsGamepadAvailable",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gamepad is available",
      "custom": false
    },
    {
      "name": "GetGamepadName",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get gamepad internal name id",
      "custom": false
    },
    {
      "name": "IsGamepadButtonPressed",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        },
        {
          "name": "button",
          "typ": "GamepadButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gamepad button has been pressed once",
      "custom": true
    },
    {
      "name": "IsGamepadButtonDown",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        },
        {
          "name": "button",
          "typ": "GamepadButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gamepad button is being pressed",
      "custom": true
    },
    {
      "name": "IsGamepadButtonReleased",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        },
        {
          "name": "button",
          "typ": "GamepadButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gamepad button has been released once",
      "custom": true
    },
    {
      "name": "IsGamepadButtonUp",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        },
        {
          "name": "button",
          "typ": "GamepadButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gamepad button is NOT being pressed",
      "custom": true
    },
    {
      "name": "GetGamepadButtonPressed",
      "params": [],
      "returnType": "GamepadButton",
      "description": "Get the last gamepad button pressed",
      "custom": true
    },
    {
      "name": "GetGamepadAxisCount",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get gamepad axis count for a gamepad",
      "custom": false
    },
    {
      "name": "GetGamepadAxisMovement",
      "params": [
        {
          "name": "gamepad",
          "typ": "i32"
        },
        {
          "name": "axis",
          "typ": "GamepadAxis"
        }
      ],
      "returnType": "f32",
      "description": "Get axis movement value for a gamepad axis",
      "custom": true
    },
    {
      "name": "SetGamepadMappings",
      "params": [
        {
          "name": "mappings",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Set internal gamepad mappings (SDL_GameControllerDB)",
      "custom": false
    },
    {
      "name": "IsMouseButtonPressed",
      "params": [
        {
          "name": "button",
          "typ": "MouseButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a mouse button has been pressed once",
      "custom": true
    },
    {
      "name": "IsMouseButtonDown",
      "params": [
        {
          "name": "button",
          "typ": "MouseButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a mouse button is being pressed",
      "custom": true
    },
    {
      "name": "IsMouseButtonReleased",
      "params": [
        {
          "name": "button",
          "typ": "MouseButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a mouse button has been released once",
      "custom": true
    },
    {
      "name": "IsMouseButtonUp",
      "params": [
        {
          "name": "button",
          "typ": "MouseButton"
        }
      ],
      "returnType": "bool",
      "description": "Check if a mouse button is NOT being pressed",
      "custom": true
    },
    {
      "name": "GetMouseX",
      "params": [],
      "returnType": "i32",
      "description": "Get mouse position X",
      "custom": false
    },
    {
      "name": "GetMouseY",
      "params": [],
      "returnType": "i32",
      "description": "Get mouse position Y",
      "custom": false
    },
    {
      "name": "GetMousePosition",
      "params": [],
      "returnType": "Vector2",
      "description": "Get mouse position XY",
      "custom": false
    },
    {
      "name": "GetMouseDelta",
      "params": [],
      "returnType": "Vector2",
      "description": "Get mouse delta between frames",
      "custom": false
    },
    {
      "name": "SetMousePosition",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set mouse position XY",
      "custom": false
    },
    {
      "name": "SetMouseOffset",
      "params": [
        {
          "name": "offsetX",
          "typ": "i32"
        },
        {
          "name": "offsetY",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set mouse offset",
      "custom": false
    },
    {
      "name": "SetMouseScale",
      "params": [
        {
          "name": "scaleX",
          "typ": "f32"
        },
        {
          "name": "scaleY",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set mouse scaling",
      "custom": false
    },
    {
      "name": "GetMouseWheelMove",
      "params": [],
      "returnType": "f32",
      "description": "Get mouse wheel movement for X or Y, whichever is larger",
      "custom": false
    },
    {
      "name": "GetMouseWheelMoveV",
      "params": [],
      "returnType": "Vector2",
      "description": "Get mouse wheel movement for both X and Y",
      "custom": false
    },
    {
      "name": "SetMouseCursor",
      "params": [
        {
          "name": "cursor",
          "typ": "MouseCursor"
        }
      ],
      "returnType": "void",
      "description": "Set mouse cursor",
      "custom": true
    },
    {
      "name": "GetTouchX",
      "params": [],
      "returnType": "i32",
      "description": "Get touch position X for touch point 0 (relative to screen size)",
      "custom": false
    },
    {
      "name": "GetTouchY",
      "params": [],
      "returnType": "i32",
      "description": "Get touch position Y for touch point 0 (relative to screen size)",
      "custom": false
    },
    {
      "name": "GetTouchPosition",
      "params": [
        {
          "name": "index",
          "typ": "i32"
        }
      ],
      "returnType": "Vector2",
      "description": "Get touch position XY for a touch point index (relative to screen size)",
      "custom": false
    },
    {
      "name": "GetTouchPointId",
      "params": [
        {
          "name": "index",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get touch point identifier for given index",
      "custom": false
    },
    {
      "name": "GetTouchPointCount",
      "params": [],
      "returnType": "i32",
      "description": "Get number of touch points",
      "custom": false
    },
    {
      "name": "SetGesturesEnabled",
      "params": [
        {
          "name": "flags",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable a set of gestures using flags",
      "custom": false
    },
    {
      "name": "IsGestureDetected",
      "params": [
        {
          "name": "gesture",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check if a gesture have been detected",
      "custom": false
    },
    {
      "name": "GetGestureDetected",
      "params": [],
      "returnType": "i32",
      "description": "Get latest detected gesture",
      "custom": false
    },
    {
      "name": "GetGestureHoldDuration",
      "params": [],
      "returnType": "f32",
      "description": "Get gesture hold time in milliseconds",
      "custom": false
    },
    {
      "name": "GetGestureDragVector",
      "params": [],
      "returnType": "Vector2",
      "description": "Get gesture drag vector",
      "custom": false
    },
    {
      "name": "GetGestureDragAngle",
      "params": [],
      "returnType": "f32",
      "description": "Get gesture drag angle",
      "custom": false
    },
    {
      "name": "GetGesturePinchVector",
      "params": [],
      "returnType": "Vector2",
      "description": "Get gesture pinch delta",
      "custom": false
    },
    {
      "name": "GetGesturePinchAngle",
      "params": [],
      "returnType": "f32",
      "description": "Get gesture pinch angle",
      "custom": false
    },
    {
      "name": "UpdateCamera",
      "params": [
        {
          "name": "camera",
          "typ": "*Camera3D"
        },
        {
          "name": "mode",
          "typ": "CameraMode"
        }
      ],
      "returnType": "void",
      "description": "Update camera position for selected mode",
      "custom": true
    },
    {
      "name": "UpdateCameraPro",
      "params": [
        {
          "name": "camera",
          "typ": "?[*]Camera3D"
        },
        {
          "name": "movement",
          "typ": "Vector3"
        },
        {
          "name": "rotation",
          "typ": "Vector3"
        },
        {
          "name": "zoom",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Update camera movement/rotation",
      "custom": false
    },
    {
      "name": "SetShapesTexture",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "source",
          "typ": "Rectangle"
        }
      ],
      "returnType": "void",
      "description": "Set texture and rectangle to be used on shapes drawing",
      "custom": false
    },
    {
      "name": "DrawPixel",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a pixel",
      "custom": false
    },
    {
      "name": "DrawPixelV",
      "params": [
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a pixel (Vector version)",
      "custom": false
    },
    {
      "name": "DrawLine",
      "params": [
        {
          "name": "startPosX",
          "typ": "i32"
        },
        {
          "name": "startPosY",
          "typ": "i32"
        },
        {
          "name": "endPosX",
          "typ": "i32"
        },
        {
          "name": "endPosY",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a line",
      "custom": false
    },
    {
      "name": "DrawLineV",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector2"
        },
        {
          "name": "endPos",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a line (Vector version)",
      "custom": false
    },
    {
      "name": "DrawLineEx",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector2"
        },
        {
          "name": "endPos",
          "typ": "Vector2"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a line defining thickness",
      "custom": false
    },
    {
      "name": "DrawLineBezier",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector2"
        },
        {
          "name": "endPos",
          "typ": "Vector2"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a line using cubic-bezier curves in-out",
      "custom": false
    },
    {
      "name": "DrawLineBezierQuad",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector2"
        },
        {
          "name": "endPos",
          "typ": "Vector2"
        },
        {
          "name": "controlPos",
          "typ": "Vector2"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw line using quadratic bezier curves with a control point",
      "custom": false
    },
    {
      "name": "DrawLineBezierCubic",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector2"
        },
        {
          "name": "endPos",
          "typ": "Vector2"
        },
        {
          "name": "startControlPos",
          "typ": "Vector2"
        },
        {
          "name": "endControlPos",
          "typ": "Vector2"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw line using cubic bezier curves with 2 control points",
      "custom": false
    },
    {
      "name": "DrawLineBSpline",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a B-Spline line, minimum 4 points",
      "custom": false
    },
    {
      "name": "DrawLineCatmullRom",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "thick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a Catmull Rom spline line, minimum 4 points",
      "custom": false
    },
    {
      "name": "DrawLineStrip",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw lines sequence",
      "custom": false
    },
    {
      "name": "DrawCircle",
      "params": [
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled circle",
      "custom": false
    },
    {
      "name": "DrawCircleSector",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "startAngle",
          "typ": "f32"
        },
        {
          "name": "endAngle",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a piece of a circle",
      "custom": false
    },
    {
      "name": "DrawCircleSectorLines",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "startAngle",
          "typ": "f32"
        },
        {
          "name": "endAngle",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw circle sector outline",
      "custom": false
    },
    {
      "name": "DrawCircleGradient",
      "params": [
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "color1",
          "typ": "Color"
        },
        {
          "name": "color2",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a gradient-filled circle",
      "custom": false
    },
    {
      "name": "DrawCircleV",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled circle (Vector version)",
      "custom": false
    },
    {
      "name": "DrawCircleLines",
      "params": [
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw circle outline",
      "custom": false
    },
    {
      "name": "DrawEllipse",
      "params": [
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radiusH",
          "typ": "f32"
        },
        {
          "name": "radiusV",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw ellipse",
      "custom": false
    },
    {
      "name": "DrawEllipseLines",
      "params": [
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radiusH",
          "typ": "f32"
        },
        {
          "name": "radiusV",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw ellipse outline",
      "custom": false
    },
    {
      "name": "DrawRing",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "innerRadius",
          "typ": "f32"
        },
        {
          "name": "outerRadius",
          "typ": "f32"
        },
        {
          "name": "startAngle",
          "typ": "f32"
        },
        {
          "name": "endAngle",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw ring",
      "custom": false
    },
    {
      "name": "DrawRingLines",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "innerRadius",
          "typ": "f32"
        },
        {
          "name": "outerRadius",
          "typ": "f32"
        },
        {
          "name": "startAngle",
          "typ": "f32"
        },
        {
          "name": "endAngle",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw ring outline",
      "custom": false
    },
    {
      "name": "DrawRectangle",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled rectangle",
      "custom": false
    },
    {
      "name": "DrawRectangleV",
      "params": [
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "size",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled rectangle (Vector version)",
      "custom": false
    },
    {
      "name": "DrawRectangleRec",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled rectangle",
      "custom": false
    },
    {
      "name": "DrawRectanglePro",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "origin",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled rectangle with pro parameters",
      "custom": false
    },
    {
      "name": "DrawRectangleGradientV",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color1",
          "typ": "Color"
        },
        {
          "name": "color2",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a vertical-gradient-filled rectangle",
      "custom": false
    },
    {
      "name": "DrawRectangleGradientH",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color1",
          "typ": "Color"
        },
        {
          "name": "color2",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a horizontal-gradient-filled rectangle",
      "custom": false
    },
    {
      "name": "DrawRectangleGradientEx",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "col1",
          "typ": "Color"
        },
        {
          "name": "col2",
          "typ": "Color"
        },
        {
          "name": "col3",
          "typ": "Color"
        },
        {
          "name": "col4",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a gradient-filled rectangle with custom vertex colors",
      "custom": false
    },
    {
      "name": "DrawRectangleLines",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle outline",
      "custom": false
    },
    {
      "name": "DrawRectangleLinesEx",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "lineThick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle outline with extended parameters",
      "custom": false
    },
    {
      "name": "DrawRectangleRounded",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "roundness",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle with rounded edges",
      "custom": false
    },
    {
      "name": "DrawRectangleRoundedLines",
      "params": [
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "roundness",
          "typ": "f32"
        },
        {
          "name": "segments",
          "typ": "i32"
        },
        {
          "name": "lineThick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle with rounded edges outline",
      "custom": false
    },
    {
      "name": "DrawTriangle",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        },
        {
          "name": "v3",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
      "custom": false
    },
    {
      "name": "DrawTriangleLines",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        },
        {
          "name": "v3",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw triangle outline (vertex in counter-clockwise order!)",
      "custom": false
    },
    {
      "name": "DrawTriangleFan",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a triangle fan defined by points (first vertex is the center)",
      "custom": false
    },
    {
      "name": "DrawTriangleStrip",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a triangle strip defined by points",
      "custom": false
    },
    {
      "name": "DrawPoly",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a regular polygon (Vector version)",
      "custom": false
    },
    {
      "name": "DrawPolyLines",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a polygon outline of n sides",
      "custom": false
    },
    {
      "name": "DrawPolyLinesEx",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "lineThick",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a polygon outline of n sides with extended parameters",
      "custom": false
    },
    {
      "name": "CheckCollisionRecs",
      "params": [
        {
          "name": "rec1",
          "typ": "Rectangle"
        },
        {
          "name": "rec2",
          "typ": "Rectangle"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between two rectangles",
      "custom": false
    },
    {
      "name": "CheckCollisionCircles",
      "params": [
        {
          "name": "center1",
          "typ": "Vector2"
        },
        {
          "name": "radius1",
          "typ": "f32"
        },
        {
          "name": "center2",
          "typ": "Vector2"
        },
        {
          "name": "radius2",
          "typ": "f32"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between two circles",
      "custom": false
    },
    {
      "name": "CheckCollisionCircleRec",
      "params": [
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between circle and rectangle",
      "custom": false
    },
    {
      "name": "CheckCollisionPointRec",
      "params": [
        {
          "name": "point",
          "typ": "Vector2"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        }
      ],
      "returnType": "bool",
      "description": "Check if point is inside rectangle",
      "custom": false
    },
    {
      "name": "CheckCollisionPointCircle",
      "params": [
        {
          "name": "point",
          "typ": "Vector2"
        },
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "f32"
        }
      ],
      "returnType": "bool",
      "description": "Check if point is inside circle",
      "custom": false
    },
    {
      "name": "CheckCollisionPointTriangle",
      "params": [
        {
          "name": "point",
          "typ": "Vector2"
        },
        {
          "name": "p1",
          "typ": "Vector2"
        },
        {
          "name": "p2",
          "typ": "Vector2"
        },
        {
          "name": "p3",
          "typ": "Vector2"
        }
      ],
      "returnType": "bool",
      "description": "Check if point is inside a triangle",
      "custom": false
    },
    {
      "name": "CheckCollisionPointPoly",
      "params": [
        {
          "name": "point",
          "typ": "Vector2"
        },
        {
          "name": "points",
          "typ": "?[*]Vector2"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check if point is within a polygon described by array of vertices",
      "custom": false
    },
    {
      "name": "CheckCollisionLines",
      "params": [
        {
          "name": "startPos1",
          "typ": "Vector2"
        },
        {
          "name": "endPos1",
          "typ": "Vector2"
        },
        {
          "name": "startPos2",
          "typ": "Vector2"
        },
        {
          "name": "endPos2",
          "typ": "Vector2"
        },
        {
          "name": "collisionPoint",
          "typ": "?[*]Vector2"
        }
      ],
      "returnType": "bool",
      "description": "Check the collision between two lines defined by two points each, returns collision point by reference",
      "custom": false
    },
    {
      "name": "CheckCollisionPointLine",
      "params": [
        {
          "name": "point",
          "typ": "Vector2"
        },
        {
          "name": "p1",
          "typ": "Vector2"
        },
        {
          "name": "p2",
          "typ": "Vector2"
        },
        {
          "name": "threshold",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]",
      "custom": false
    },
    {
      "name": "GetCollisionRec",
      "params": [
        {
          "name": "rec1",
          "typ": "Rectangle"
        },
        {
          "name": "rec2",
          "typ": "Rectangle"
        }
      ],
      "returnType": "Rectangle",
      "description": "Get collision rectangle for two rectangles collision",
      "custom": false
    },
    {
      "name": "LoadImage",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Image",
      "description": "Load image from file into CPU memory (RAM)",
      "custom": false
    },
    {
      "name": "LoadImageRaw",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "headerSize",
          "typ": "i32"
        }
      ],
      "returnType": "Image",
      "description": "Load image from RAW file data",
      "custom": false
    },
    {
      "name": "LoadImageSvg",
      "params": [
        {
          "name": "fileNameOrString",
          "typ": "[*:0]const u8"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "Image",
      "description": "Load image from SVG file data or string with specified size",
      "custom": false
    },
    {
      "name": "LoadImageAnim",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "frames",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "Image",
      "description": "Load image sequence from file (frames appended to image.data)",
      "custom": false
    },
    {
      "name": "LoadImageFromMemory",
      "params": [
        {
          "name": "fileType",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fileData",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        }
      ],
      "returnType": "Image",
      "description": "Load image from memory buffer, fileType refers to extension: i.e. '.png'",
      "custom": false
    },
    {
      "name": "LoadImageFromTexture",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        }
      ],
      "returnType": "Image",
      "description": "Load image from GPU texture data",
      "custom": false
    },
    {
      "name": "LoadImageFromScreen",
      "params": [],
      "returnType": "Image",
      "description": "Load image from screen buffer and (screenshot)",
      "custom": false
    },
    {
      "name": "IsImageReady",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "bool",
      "description": "Check if an image is ready",
      "custom": false
    },
    {
      "name": "UnloadImage",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "void",
      "description": "Unload image from CPU memory (RAM)",
      "custom": false
    },
    {
      "name": "ExportImage",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export image data to file, returns true on success",
      "custom": false
    },
    {
      "name": "ExportImageToMemory",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "fileType",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fileSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Export image to memory buffer",
      "custom": false
    },
    {
      "name": "ExportImageAsCode",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export image as code file defining an array of bytes, returns true on success",
      "custom": false
    },
    {
      "name": "GenImageColor",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: plain color",
      "custom": false
    },
    {
      "name": "GenImageGradientLinear",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "direction",
          "typ": "i32"
        },
        {
          "name": "start",
          "typ": "Color"
        },
        {
          "name": "end",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient",
      "custom": false
    },
    {
      "name": "GenImageGradientRadial",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "density",
          "typ": "f32"
        },
        {
          "name": "inner",
          "typ": "Color"
        },
        {
          "name": "outer",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: radial gradient",
      "custom": false
    },
    {
      "name": "GenImageGradientSquare",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "density",
          "typ": "f32"
        },
        {
          "name": "inner",
          "typ": "Color"
        },
        {
          "name": "outer",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: square gradient",
      "custom": false
    },
    {
      "name": "GenImageChecked",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "checksX",
          "typ": "i32"
        },
        {
          "name": "checksY",
          "typ": "i32"
        },
        {
          "name": "col1",
          "typ": "Color"
        },
        {
          "name": "col2",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: checked",
      "custom": false
    },
    {
      "name": "GenImageWhiteNoise",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "factor",
          "typ": "f32"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: white noise",
      "custom": false
    },
    {
      "name": "GenImagePerlinNoise",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "offsetX",
          "typ": "i32"
        },
        {
          "name": "offsetY",
          "typ": "i32"
        },
        {
          "name": "scale",
          "typ": "f32"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: perlin noise",
      "custom": false
    },
    {
      "name": "GenImageCellular",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "tileSize",
          "typ": "i32"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: cellular algorithm, bigger tileSize means bigger cells",
      "custom": false
    },
    {
      "name": "GenImageText",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Image",
      "description": "Generate image: grayscale image from text data",
      "custom": false
    },
    {
      "name": "ImageCopy",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "Image",
      "description": "Create an image duplicate (useful for transformations)",
      "custom": false
    },
    {
      "name": "ImageFromImage",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        }
      ],
      "returnType": "Image",
      "description": "Create an image from another image piece",
      "custom": false
    },
    {
      "name": "ImageText",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Create an image from text (default font)",
      "custom": false
    },
    {
      "name": "ImageTextEx",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "Image",
      "description": "Create an image from text (custom sprite font)",
      "custom": false
    },
    {
      "name": "ImageFormat",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "newFormat",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Convert image data to desired format",
      "custom": false
    },
    {
      "name": "ImageToPOT",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "fill",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Convert image to POT (power-of-two)",
      "custom": false
    },
    {
      "name": "ImageCrop",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "crop",
          "typ": "Rectangle"
        }
      ],
      "returnType": "void",
      "description": "Crop an image to a defined rectangle",
      "custom": false
    },
    {
      "name": "ImageAlphaCrop",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "threshold",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Crop image depending on alpha value",
      "custom": false
    },
    {
      "name": "ImageAlphaClear",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "threshold",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Clear alpha channel to desired color",
      "custom": false
    },
    {
      "name": "ImageAlphaMask",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "alphaMask",
          "typ": "Image"
        }
      ],
      "returnType": "void",
      "description": "Apply alpha mask to image",
      "custom": false
    },
    {
      "name": "ImageAlphaPremultiply",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Premultiply alpha channel",
      "custom": false
    },
    {
      "name": "ImageBlurGaussian",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "blurSize",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Apply Gaussian blur using a box blur approximation",
      "custom": false
    },
    {
      "name": "ImageResize",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "newWidth",
          "typ": "i32"
        },
        {
          "name": "newHeight",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Resize image (Bicubic scaling algorithm)",
      "custom": false
    },
    {
      "name": "ImageResizeNN",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "newWidth",
          "typ": "i32"
        },
        {
          "name": "newHeight",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Resize image (Nearest-Neighbor scaling algorithm)",
      "custom": false
    },
    {
      "name": "ImageResizeCanvas",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "newWidth",
          "typ": "i32"
        },
        {
          "name": "newHeight",
          "typ": "i32"
        },
        {
          "name": "offsetX",
          "typ": "i32"
        },
        {
          "name": "offsetY",
          "typ": "i32"
        },
        {
          "name": "fill",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Resize canvas and fill with color",
      "custom": false
    },
    {
      "name": "ImageMipmaps",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Compute all mipmap levels for a provided image",
      "custom": false
    },
    {
      "name": "ImageDither",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "rBpp",
          "typ": "i32"
        },
        {
          "name": "gBpp",
          "typ": "i32"
        },
        {
          "name": "bBpp",
          "typ": "i32"
        },
        {
          "name": "aBpp",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Dither image data to 16bpp or lower (Floyd-Steinberg dithering)",
      "custom": false
    },
    {
      "name": "ImageFlipVertical",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Flip image vertically",
      "custom": false
    },
    {
      "name": "ImageFlipHorizontal",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Flip image horizontally",
      "custom": false
    },
    {
      "name": "ImageRotate",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "degrees",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Rotate image by input angle in degrees (-359 to 359)",
      "custom": false
    },
    {
      "name": "ImageRotateCW",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Rotate image clockwise 90deg",
      "custom": false
    },
    {
      "name": "ImageRotateCCW",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Rotate image counter-clockwise 90deg",
      "custom": false
    },
    {
      "name": "ImageColorTint",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: tint",
      "custom": false
    },
    {
      "name": "ImageColorInvert",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: invert",
      "custom": false
    },
    {
      "name": "ImageColorGrayscale",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: grayscale",
      "custom": false
    },
    {
      "name": "ImageColorContrast",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "contrast",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: contrast (-100 to 100)",
      "custom": false
    },
    {
      "name": "ImageColorBrightness",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "brightness",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: brightness (-255 to 255)",
      "custom": false
    },
    {
      "name": "ImageColorReplace",
      "params": [
        {
          "name": "image",
          "typ": "*Image"
        },
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "replace",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Modify image color: replace color",
      "custom": false
    },
    {
      "name": "LoadImageColors",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "?[*]Color",
      "description": "Load color data from image as a Color array (RGBA - 32bit)",
      "custom": false
    },
    {
      "name": "LoadImagePalette",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "maxPaletteSize",
          "typ": "i32"
        },
        {
          "name": "colorCount",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]Color",
      "description": "Load colors palette from image as a Color array (RGBA - 32bit)",
      "custom": false
    },
    {
      "name": "UnloadImageColors",
      "params": [
        {
          "name": "colors",
          "typ": "?[*]Color"
        }
      ],
      "returnType": "void",
      "description": "Unload color data loaded with LoadImageColors()",
      "custom": false
    },
    {
      "name": "UnloadImagePalette",
      "params": [
        {
          "name": "colors",
          "typ": "?[*]Color"
        }
      ],
      "returnType": "void",
      "description": "Unload colors palette loaded with LoadImagePalette()",
      "custom": false
    },
    {
      "name": "GetImageAlphaBorder",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "threshold",
          "typ": "f32"
        }
      ],
      "returnType": "Rectangle",
      "description": "Get image alpha border rectangle",
      "custom": false
    },
    {
      "name": "GetImageColor",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        }
      ],
      "returnType": "Color",
      "description": "Get image pixel color at (x, y) position",
      "custom": false
    },
    {
      "name": "ImageClearBackground",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Clear image background with given color",
      "custom": false
    },
    {
      "name": "ImageDrawPixel",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw pixel within an image",
      "custom": false
    },
    {
      "name": "ImageDrawPixelV",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw pixel within an image (Vector version)",
      "custom": false
    },
    {
      "name": "ImageDrawLine",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "startPosX",
          "typ": "i32"
        },
        {
          "name": "startPosY",
          "typ": "i32"
        },
        {
          "name": "endPosX",
          "typ": "i32"
        },
        {
          "name": "endPosY",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw line within an image",
      "custom": false
    },
    {
      "name": "ImageDrawLineV",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "start",
          "typ": "Vector2"
        },
        {
          "name": "end",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw line within an image (Vector version)",
      "custom": false
    },
    {
      "name": "ImageDrawCircle",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a filled circle within an image",
      "custom": false
    },
    {
      "name": "ImageDrawCircleV",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a filled circle within an image (Vector version)",
      "custom": false
    },
    {
      "name": "ImageDrawCircleLines",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "centerX",
          "typ": "i32"
        },
        {
          "name": "centerY",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw circle outline within an image",
      "custom": false
    },
    {
      "name": "ImageDrawCircleLinesV",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "center",
          "typ": "Vector2"
        },
        {
          "name": "radius",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw circle outline within an image (Vector version)",
      "custom": false
    },
    {
      "name": "ImageDrawRectangle",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle within an image",
      "custom": false
    },
    {
      "name": "ImageDrawRectangleV",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "size",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle within an image (Vector version)",
      "custom": false
    },
    {
      "name": "ImageDrawRectangleRec",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle within an image",
      "custom": false
    },
    {
      "name": "ImageDrawRectangleLines",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "thick",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw rectangle lines within an image",
      "custom": false
    },
    {
      "name": "ImageDraw",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "src",
          "typ": "Image"
        },
        {
          "name": "srcRec",
          "typ": "Rectangle"
        },
        {
          "name": "dstRec",
          "typ": "Rectangle"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a source image within a destination image (tint applied to source)",
      "custom": false
    },
    {
      "name": "ImageDrawText",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw text (using default font) within an image (destination)",
      "custom": false
    },
    {
      "name": "ImageDrawTextEx",
      "params": [
        {
          "name": "dst",
          "typ": "*Image"
        },
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw text (custom sprite font) within an image (destination)",
      "custom": false
    },
    {
      "name": "LoadTexture",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Texture2D",
      "description": "Load texture from file into GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "LoadTextureFromImage",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        }
      ],
      "returnType": "Texture2D",
      "description": "Load texture from image data",
      "custom": false
    },
    {
      "name": "LoadTextureCubemap",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "layout",
          "typ": "i32"
        }
      ],
      "returnType": "Texture2D",
      "description": "Load cubemap from image, multiple image cubemap layouts supported",
      "custom": false
    },
    {
      "name": "LoadRenderTexture",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "RenderTexture2D",
      "description": "Load texture for rendering (framebuffer)",
      "custom": false
    },
    {
      "name": "IsTextureReady",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        }
      ],
      "returnType": "bool",
      "description": "Check if a texture is ready",
      "custom": false
    },
    {
      "name": "UnloadTexture",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        }
      ],
      "returnType": "void",
      "description": "Unload texture from GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "IsRenderTextureReady",
      "params": [
        {
          "name": "target",
          "typ": "RenderTexture2D"
        }
      ],
      "returnType": "bool",
      "description": "Check if a render texture is ready",
      "custom": false
    },
    {
      "name": "UnloadRenderTexture",
      "params": [
        {
          "name": "target",
          "typ": "RenderTexture2D"
        }
      ],
      "returnType": "void",
      "description": "Unload render texture from GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "UpdateTexture",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "pixels",
          "typ": "*const anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Update GPU texture with new data",
      "custom": false
    },
    {
      "name": "UpdateTextureRec",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "rec",
          "typ": "Rectangle"
        },
        {
          "name": "pixels",
          "typ": "*const anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Update GPU texture rectangle with new data",
      "custom": false
    },
    {
      "name": "TextFormat",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "rewritten in inject.zig",
      "custom": true
    },
    {
      "name": "SetTextureFilter",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "filter",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set texture scaling filter mode",
      "custom": false
    },
    {
      "name": "SetTextureWrap",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "wrap",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set texture wrapping mode",
      "custom": false
    },
    {
      "name": "DrawTexture",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a Texture2D",
      "custom": false
    },
    {
      "name": "DrawTextureV",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a Texture2D with position defined as Vector2",
      "custom": false
    },
    {
      "name": "DrawTextureEx",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "scale",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a Texture2D with extended parameters",
      "custom": false
    },
    {
      "name": "DrawTextureRec",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "source",
          "typ": "Rectangle"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a part of a texture defined by a rectangle",
      "custom": false
    },
    {
      "name": "DrawTexturePro",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "source",
          "typ": "Rectangle"
        },
        {
          "name": "dest",
          "typ": "Rectangle"
        },
        {
          "name": "origin",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a part of a texture defined by a rectangle with 'pro' parameters",
      "custom": false
    },
    {
      "name": "DrawTextureNPatch",
      "params": [
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "nPatchInfo",
          "typ": "NPatchInfo"
        },
        {
          "name": "dest",
          "typ": "Rectangle"
        },
        {
          "name": "origin",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draws a texture (or part of it) that stretches or shrinks nicely",
      "custom": false
    },
    {
      "name": "Fade",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "alpha",
          "typ": "f32"
        }
      ],
      "returnType": "Color",
      "description": "Get color with alpha applied, alpha goes from 0.0f to 1.0f",
      "custom": false
    },
    {
      "name": "ColorToInt",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "i32",
      "description": "Get hexadecimal value for a Color",
      "custom": false
    },
    {
      "name": "ColorNormalize",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "Vector4",
      "description": "Get Color normalized as float [0..1]",
      "custom": false
    },
    {
      "name": "ColorFromNormalized",
      "params": [
        {
          "name": "normalized",
          "typ": "Vector4"
        }
      ],
      "returnType": "Color",
      "description": "Get Color from normalized values [0..1]",
      "custom": false
    },
    {
      "name": "ColorToHSV",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "Vector3",
      "description": "Get HSV values for a Color, hue [0..360], saturation/value [0..1]",
      "custom": false
    },
    {
      "name": "ColorFromHSV",
      "params": [
        {
          "name": "hue",
          "typ": "f32"
        },
        {
          "name": "saturation",
          "typ": "f32"
        },
        {
          "name": "value",
          "typ": "f32"
        }
      ],
      "returnType": "Color",
      "description": "Get a Color from HSV values, hue [0..360], saturation/value [0..1]",
      "custom": false
    },
    {
      "name": "ColorTint",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "Color",
      "description": "Get color multiplied with another color",
      "custom": false
    },
    {
      "name": "ColorBrightness",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "factor",
          "typ": "f32"
        }
      ],
      "returnType": "Color",
      "description": "Get color with brightness correction, brightness factor goes from -1.0f to 1.0f",
      "custom": false
    },
    {
      "name": "ColorContrast",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "contrast",
          "typ": "f32"
        }
      ],
      "returnType": "Color",
      "description": "Get color with contrast correction, contrast values between -1.0f and 1.0f",
      "custom": false
    },
    {
      "name": "ColorAlpha",
      "params": [
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "alpha",
          "typ": "f32"
        }
      ],
      "returnType": "Color",
      "description": "Get color with alpha applied, alpha goes from 0.0f to 1.0f",
      "custom": false
    },
    {
      "name": "ColorAlphaBlend",
      "params": [
        {
          "name": "dst",
          "typ": "Color"
        },
        {
          "name": "src",
          "typ": "Color"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "Color",
      "description": "Get src alpha-blended into dst color with tint",
      "custom": false
    },
    {
      "name": "GetColor",
      "params": [
        {
          "name": "hexValue",
          "typ": "u32"
        }
      ],
      "returnType": "Color",
      "description": "Get Color structure from hexadecimal value",
      "custom": false
    },
    {
      "name": "GetPixelColor",
      "params": [
        {
          "name": "srcPtr",
          "typ": "*anyopaque"
        },
        {
          "name": "format",
          "typ": "i32"
        }
      ],
      "returnType": "Color",
      "description": "Get Color from a source pixel pointer of certain format",
      "custom": false
    },
    {
      "name": "SetPixelColor",
      "params": [
        {
          "name": "dstPtr",
          "typ": "*anyopaque"
        },
        {
          "name": "color",
          "typ": "Color"
        },
        {
          "name": "format",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set color formatted into destination pixel pointer",
      "custom": false
    },
    {
      "name": "GetPixelDataSize",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get pixel data size in bytes for certain format",
      "custom": false
    },
    {
      "name": "GetFontDefault",
      "params": [],
      "returnType": "Font",
      "description": "Get the default Font",
      "custom": false
    },
    {
      "name": "LoadFont",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Font",
      "description": "Load font from file into GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "LoadFontEx",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "codepoints",
          "typ": "?[*]i32"
        },
        {
          "name": "codepointCount",
          "typ": "i32"
        }
      ],
      "returnType": "Font",
      "description": "Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character setFont",
      "custom": false
    },
    {
      "name": "LoadFontFromImage",
      "params": [
        {
          "name": "image",
          "typ": "Image"
        },
        {
          "name": "key",
          "typ": "Color"
        },
        {
          "name": "firstChar",
          "typ": "i32"
        }
      ],
      "returnType": "Font",
      "description": "Load font from Image (XNA style)",
      "custom": false
    },
    {
      "name": "LoadFontFromMemory",
      "params": [
        {
          "name": "fileType",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fileData",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "codepoints",
          "typ": "?[*]i32"
        },
        {
          "name": "codepointCount",
          "typ": "i32"
        }
      ],
      "returnType": "Font",
      "description": "Load font from memory buffer, fileType refers to extension: i.e. '.ttf'",
      "custom": false
    },
    {
      "name": "IsFontReady",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        }
      ],
      "returnType": "bool",
      "description": "Check if a font is ready",
      "custom": false
    },
    {
      "name": "TextFormat",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "rewritten in inject.zig",
      "custom": true
    },
    {
      "name": "GenImageFontAtlas",
      "params": [
        {
          "name": "glyphs",
          "typ": "?[*]const GlyphInfo"
        },
        {
          "name": "glyphRecs",
          "typ": "?[*]Rectangle"
        },
        {
          "name": "glyphCount",
          "typ": "i32"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "padding",
          "typ": "i32"
        },
        {
          "name": "packMethod",
          "typ": "i32"
        }
      ],
      "returnType": "Image",
      "description": "Generate image font atlas using chars info",
      "custom": false
    },
    {
      "name": "UnloadFontData",
      "params": [
        {
          "name": "glyphs",
          "typ": "?[*]GlyphInfo"
        },
        {
          "name": "glyphCount",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Unload font chars info data (RAM)",
      "custom": false
    },
    {
      "name": "UnloadFont",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        }
      ],
      "returnType": "void",
      "description": "Unload font from GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "ExportFontAsCode",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export font as code file, returns true on success",
      "custom": false
    },
    {
      "name": "DrawFPS",
      "params": [
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Draw current FPS",
      "custom": false
    },
    {
      "name": "DrawText",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "posX",
          "typ": "i32"
        },
        {
          "name": "posY",
          "typ": "i32"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw text (using default font)",
      "custom": false
    },
    {
      "name": "DrawTextEx",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw text using font and additional parameters",
      "custom": false
    },
    {
      "name": "DrawTextPro",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "origin",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw text using Font and pro parameters (rotation)",
      "custom": false
    },
    {
      "name": "DrawTextCodepoint",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "codepoint",
          "typ": "i32"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw one character (codepoint)",
      "custom": false
    },
    {
      "name": "DrawTextCodepoints",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "codepoints",
          "typ": "?[*]const i32"
        },
        {
          "name": "codepointCount",
          "typ": "i32"
        },
        {
          "name": "position",
          "typ": "Vector2"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw multiple character (codepoint)",
      "custom": false
    },
    {
      "name": "SetTextLineSpacing",
      "params": [
        {
          "name": "spacing",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set vertical line spacing when drawing with line-breaks",
      "custom": false
    },
    {
      "name": "MeasureText",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Measure string width for default font",
      "custom": false
    },
    {
      "name": "MeasureTextEx",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fontSize",
          "typ": "f32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "Measure string size for Font",
      "custom": false
    },
    {
      "name": "GetGlyphIndex",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "codepoint",
          "typ": "i32"
        }
      ],
      "returnType": "i32",
      "description": "Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found",
      "custom": false
    },
    {
      "name": "GetGlyphInfo",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "codepoint",
          "typ": "i32"
        }
      ],
      "returnType": "GlyphInfo",
      "description": "Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found",
      "custom": false
    },
    {
      "name": "GetGlyphAtlasRec",
      "params": [
        {
          "name": "font",
          "typ": "Font"
        },
        {
          "name": "codepoint",
          "typ": "i32"
        }
      ],
      "returnType": "Rectangle",
      "description": "Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found",
      "custom": false
    },
    {
      "name": "LoadUTF8",
      "params": [
        {
          "name": "codepoints",
          "typ": "?[*]const i32"
        },
        {
          "name": "length",
          "typ": "i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Load UTF-8 text encoded from codepoints array",
      "custom": false
    },
    {
      "name": "UnloadUTF8",
      "params": [
        {
          "name": "text",
          "typ": "?[*]u8"
        }
      ],
      "returnType": "void",
      "description": "Unload UTF-8 text encoded from codepoints array",
      "custom": false
    },
    {
      "name": "LoadCodepoints",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "count",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]i32",
      "description": "Load all codepoints from a UTF-8 text string, codepoints count returned by parameter",
      "custom": false
    },
    {
      "name": "UnloadCodepoints",
      "params": [
        {
          "name": "codepoints",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "void",
      "description": "Unload codepoints data from memory",
      "custom": false
    },
    {
      "name": "GetCodepointCount",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get total number of codepoints in a UTF-8 encoded string",
      "custom": false
    },
    {
      "name": "GetCodepoint",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "codepointSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "i32",
      "description": "Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
      "custom": false
    },
    {
      "name": "GetCodepointNext",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "codepointSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "i32",
      "description": "Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
      "custom": false
    },
    {
      "name": "GetCodepointPrevious",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "codepointSize",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "i32",
      "description": "Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure",
      "custom": false
    },
    {
      "name": "CodepointToUTF8",
      "params": [
        {
          "name": "codepoint",
          "typ": "i32"
        },
        {
          "name": "utf8Size",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Encode one codepoint into UTF-8 byte array (array length returned as parameter)",
      "custom": false
    },
    {
      "name": "TextCopy",
      "params": [
        {
          "name": "dst",
          "typ": "?[*]u8"
        },
        {
          "name": "src",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Copy one string to another, returns bytes copied",
      "custom": false
    },
    {
      "name": "TextIsEqual",
      "params": [
        {
          "name": "text1",
          "typ": "[*:0]const u8"
        },
        {
          "name": "text2",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Check if two text string are equal",
      "custom": false
    },
    {
      "name": "TextLength",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "u32",
      "description": "Get text length, checks for '\\0' ending",
      "custom": false
    },
    {
      "name": "GenTextureMipmaps",
      "params": [
        {
          "name": "texture",
          "typ": "*Texture2D"
        }
      ],
      "returnType": "void",
      "description": "Generate GPU mipmaps for a texture",
      "custom": true
    },
    {
      "name": "TextSubtext",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "i32"
        },
        {
          "name": "length",
          "typ": "i32"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get a piece of a text string",
      "custom": false
    },
    {
      "name": "TextReplace",
      "params": [
        {
          "name": "text",
          "typ": "?[*]u8"
        },
        {
          "name": "replace",
          "typ": "[*:0]const u8"
        },
        {
          "name": "by",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Replace text string (WARNING: memory must be freed!)",
      "custom": false
    },
    {
      "name": "TextInsert",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "insert",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Insert text in a position (WARNING: memory must be freed!)",
      "custom": false
    },
    {
      "name": "LoadFontData",
      "params": [
        {
          "name": "fileData",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "fontSize",
          "typ": "i32"
        },
        {
          "name": "fontChars",
          "typ": "[*]i32"
        },
        {
          "name": "glyphCount",
          "typ": "i32"
        },
        {
          "name": "typ",
          "typ": "i32"
        }
      ],
      "returnType": "[*]GlyphInfo",
      "description": "Load font data for further use",
      "custom": true
    },
    {
      "name": "TextJoin",
      "params": [
        {
          "name": "textList",
          "typ": "[*]const [*:0]const u8"
        },
        {
          "name": "count",
          "typ": "i32"
        },
        {
          "name": "delimiter",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "overriden in inject.zig",
      "custom": true
    },
    {
      "name": "rlSetVertexAttribute",
      "params": [
        {
          "name": "index",
          "typ": "u32"
        },
        {
          "name": "compSize",
          "typ": "i32"
        },
        {
          "name": "typ",
          "typ": "i32"
        },
        {
          "name": "normalized",
          "typ": "bool"
        },
        {
          "name": "stride",
          "typ": "i32"
        },
        {
          "name": "pointer",
          "typ": "*anyopaque"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": true
    },
    {
      "name": "TextFindIndex",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "find",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Find first text occurrence within a string",
      "custom": false
    },
    {
      "name": "TextToUpper",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get upper case version of provided string",
      "custom": false
    },
    {
      "name": "TextToLower",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get lower case version of provided string",
      "custom": false
    },
    {
      "name": "TextToPascal",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get Pascal case notation version of provided string",
      "custom": false
    },
    {
      "name": "TextToInteger",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get integer value from text (negative values not supported)",
      "custom": false
    },
    {
      "name": "DrawLine3D",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector3"
        },
        {
          "name": "endPos",
          "typ": "Vector3"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a line in 3D world space",
      "custom": false
    },
    {
      "name": "DrawPoint3D",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a point in 3D space, actually a small line",
      "custom": false
    },
    {
      "name": "DrawCircle3D",
      "params": [
        {
          "name": "center",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rotationAxis",
          "typ": "Vector3"
        },
        {
          "name": "rotationAngle",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a circle in 3D world space",
      "custom": false
    },
    {
      "name": "DrawTriangle3D",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        },
        {
          "name": "v3",
          "typ": "Vector3"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
      "custom": false
    },
    {
      "name": "DrawTriangleStrip3D",
      "params": [
        {
          "name": "points",
          "typ": "?[*]Vector3"
        },
        {
          "name": "pointCount",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a triangle strip defined by points",
      "custom": false
    },
    {
      "name": "DrawCube",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "width",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "length",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw cube",
      "custom": false
    },
    {
      "name": "DrawCubeV",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "Vector3"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw cube (Vector version)",
      "custom": false
    },
    {
      "name": "DrawCubeWires",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "width",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "length",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw cube wires",
      "custom": false
    },
    {
      "name": "DrawCubeWiresV",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "Vector3"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw cube wires (Vector version)",
      "custom": false
    },
    {
      "name": "DrawSphere",
      "params": [
        {
          "name": "centerPos",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw sphere",
      "custom": false
    },
    {
      "name": "DrawSphereEx",
      "params": [
        {
          "name": "centerPos",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw sphere with extended parameters",
      "custom": false
    },
    {
      "name": "DrawSphereWires",
      "params": [
        {
          "name": "centerPos",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw sphere wires",
      "custom": false
    },
    {
      "name": "DrawCylinder",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "radiusTop",
          "typ": "f32"
        },
        {
          "name": "radiusBottom",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a cylinder/cone",
      "custom": false
    },
    {
      "name": "DrawCylinderEx",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector3"
        },
        {
          "name": "endPos",
          "typ": "Vector3"
        },
        {
          "name": "startRadius",
          "typ": "f32"
        },
        {
          "name": "endRadius",
          "typ": "f32"
        },
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a cylinder with base at startPos and top at endPos",
      "custom": false
    },
    {
      "name": "DrawCylinderWires",
      "params": [
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "radiusTop",
          "typ": "f32"
        },
        {
          "name": "radiusBottom",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a cylinder/cone wires",
      "custom": false
    },
    {
      "name": "DrawCylinderWiresEx",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector3"
        },
        {
          "name": "endPos",
          "typ": "Vector3"
        },
        {
          "name": "startRadius",
          "typ": "f32"
        },
        {
          "name": "endRadius",
          "typ": "f32"
        },
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a cylinder wires with base at startPos and top at endPos",
      "custom": false
    },
    {
      "name": "DrawCapsule",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector3"
        },
        {
          "name": "endPos",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a capsule with the center of its sphere caps at startPos and endPos",
      "custom": false
    },
    {
      "name": "DrawCapsuleWires",
      "params": [
        {
          "name": "startPos",
          "typ": "Vector3"
        },
        {
          "name": "endPos",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw capsule wireframe with the center of its sphere caps at startPos and endPos",
      "custom": false
    },
    {
      "name": "DrawPlane",
      "params": [
        {
          "name": "centerPos",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "Vector2"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a plane XZ",
      "custom": false
    },
    {
      "name": "DrawRay",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a ray line",
      "custom": false
    },
    {
      "name": "DrawGrid",
      "params": [
        {
          "name": "slices",
          "typ": "i32"
        },
        {
          "name": "spacing",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Draw a grid (centered at (0, 0, 0))",
      "custom": false
    },
    {
      "name": "LoadModel",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Model",
      "description": "Load model from files (meshes and materials)",
      "custom": false
    },
    {
      "name": "LoadModelFromMesh",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        }
      ],
      "returnType": "Model",
      "description": "Load model from generated mesh (default material)",
      "custom": false
    },
    {
      "name": "IsModelReady",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        }
      ],
      "returnType": "bool",
      "description": "Check if a model is ready",
      "custom": false
    },
    {
      "name": "UnloadModel",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        }
      ],
      "returnType": "void",
      "description": "Unload model (including meshes) from memory (RAM and/or VRAM)",
      "custom": false
    },
    {
      "name": "GetModelBoundingBox",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        }
      ],
      "returnType": "BoundingBox",
      "description": "Compute model bounding box limits (considers all meshes)",
      "custom": false
    },
    {
      "name": "DrawModel",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "scale",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a model (with texture if set)",
      "custom": false
    },
    {
      "name": "DrawModelEx",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "rotationAxis",
          "typ": "Vector3"
        },
        {
          "name": "rotationAngle",
          "typ": "f32"
        },
        {
          "name": "scale",
          "typ": "Vector3"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a model with extended parameters",
      "custom": false
    },
    {
      "name": "DrawModelWires",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "scale",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a model wires (with texture if set)",
      "custom": false
    },
    {
      "name": "DrawModelWiresEx",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "rotationAxis",
          "typ": "Vector3"
        },
        {
          "name": "rotationAngle",
          "typ": "f32"
        },
        {
          "name": "scale",
          "typ": "Vector3"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a model wires (with texture if set) with extended parameters",
      "custom": false
    },
    {
      "name": "DrawBoundingBox",
      "params": [
        {
          "name": "box",
          "typ": "BoundingBox"
        },
        {
          "name": "color",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw bounding box (wires)",
      "custom": false
    },
    {
      "name": "DrawBillboard",
      "params": [
        {
          "name": "camera",
          "typ": "Camera3D"
        },
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a billboard texture",
      "custom": false
    },
    {
      "name": "DrawBillboardRec",
      "params": [
        {
          "name": "camera",
          "typ": "Camera3D"
        },
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "source",
          "typ": "Rectangle"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "Vector2"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a billboard texture defined by source",
      "custom": false
    },
    {
      "name": "DrawBillboardPro",
      "params": [
        {
          "name": "camera",
          "typ": "Camera3D"
        },
        {
          "name": "texture",
          "typ": "Texture2D"
        },
        {
          "name": "source",
          "typ": "Rectangle"
        },
        {
          "name": "position",
          "typ": "Vector3"
        },
        {
          "name": "up",
          "typ": "Vector3"
        },
        {
          "name": "size",
          "typ": "Vector2"
        },
        {
          "name": "origin",
          "typ": "Vector2"
        },
        {
          "name": "rotation",
          "typ": "f32"
        },
        {
          "name": "tint",
          "typ": "Color"
        }
      ],
      "returnType": "void",
      "description": "Draw a billboard texture defined by source and rotation",
      "custom": false
    },
    {
      "name": "UploadMesh",
      "params": [
        {
          "name": "mesh",
          "typ": "?[*]Mesh"
        },
        {
          "name": "dynamic",
          "typ": "bool"
        }
      ],
      "returnType": "void",
      "description": "Upload mesh vertex data in GPU and provide VAO/VBO ids",
      "custom": false
    },
    {
      "name": "UpdateMeshBuffer",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        },
        {
          "name": "index",
          "typ": "i32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "offset",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update mesh vertex data in GPU for a specific buffer index",
      "custom": false
    },
    {
      "name": "UnloadMesh",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        }
      ],
      "returnType": "void",
      "description": "Unload mesh data from CPU and GPU",
      "custom": false
    },
    {
      "name": "DrawMesh",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        },
        {
          "name": "material",
          "typ": "Material"
        },
        {
          "name": "transform",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Draw a 3d mesh with material and transform",
      "custom": false
    },
    {
      "name": "DrawMeshInstanced",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        },
        {
          "name": "material",
          "typ": "Material"
        },
        {
          "name": "transforms",
          "typ": "?[*]const Matrix"
        },
        {
          "name": "instances",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Draw multiple mesh instances with material and different transforms",
      "custom": false
    },
    {
      "name": "ExportMesh",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export mesh data to file, returns true on success",
      "custom": false
    },
    {
      "name": "GetMeshBoundingBox",
      "params": [
        {
          "name": "mesh",
          "typ": "Mesh"
        }
      ],
      "returnType": "BoundingBox",
      "description": "Compute mesh bounding box limits",
      "custom": false
    },
    {
      "name": "GenMeshTangents",
      "params": [
        {
          "name": "mesh",
          "typ": "?[*]Mesh"
        }
      ],
      "returnType": "void",
      "description": "Compute mesh tangents",
      "custom": false
    },
    {
      "name": "GenMeshPoly",
      "params": [
        {
          "name": "sides",
          "typ": "i32"
        },
        {
          "name": "radius",
          "typ": "f32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate polygonal mesh",
      "custom": false
    },
    {
      "name": "GenMeshPlane",
      "params": [
        {
          "name": "width",
          "typ": "f32"
        },
        {
          "name": "length",
          "typ": "f32"
        },
        {
          "name": "resX",
          "typ": "i32"
        },
        {
          "name": "resZ",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate plane mesh (with subdivisions)",
      "custom": false
    },
    {
      "name": "GenMeshCube",
      "params": [
        {
          "name": "width",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "length",
          "typ": "f32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate cuboid mesh",
      "custom": false
    },
    {
      "name": "GenMeshSphere",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "slices",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate sphere mesh (standard sphere)",
      "custom": false
    },
    {
      "name": "GenMeshHemiSphere",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "rings",
          "typ": "i32"
        },
        {
          "name": "slices",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate half-sphere mesh (no bottom cap)",
      "custom": false
    },
    {
      "name": "GenMeshCylinder",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate cylinder mesh",
      "custom": false
    },
    {
      "name": "GenMeshCone",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "height",
          "typ": "f32"
        },
        {
          "name": "slices",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate cone/pyramid mesh",
      "custom": false
    },
    {
      "name": "GenMeshTorus",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "size",
          "typ": "f32"
        },
        {
          "name": "radSeg",
          "typ": "i32"
        },
        {
          "name": "sides",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate torus mesh",
      "custom": false
    },
    {
      "name": "GenMeshKnot",
      "params": [
        {
          "name": "radius",
          "typ": "f32"
        },
        {
          "name": "size",
          "typ": "f32"
        },
        {
          "name": "radSeg",
          "typ": "i32"
        },
        {
          "name": "sides",
          "typ": "i32"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate trefoil knot mesh",
      "custom": false
    },
    {
      "name": "GenMeshHeightmap",
      "params": [
        {
          "name": "heightmap",
          "typ": "Image"
        },
        {
          "name": "size",
          "typ": "Vector3"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate heightmap mesh from image data",
      "custom": false
    },
    {
      "name": "GenMeshCubicmap",
      "params": [
        {
          "name": "cubicmap",
          "typ": "Image"
        },
        {
          "name": "cubeSize",
          "typ": "Vector3"
        }
      ],
      "returnType": "Mesh",
      "description": "Generate cubes-based map mesh from image data",
      "custom": false
    },
    {
      "name": "LoadMaterials",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "materialCount",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]Material",
      "description": "Load materials from model file",
      "custom": false
    },
    {
      "name": "LoadMaterialDefault",
      "params": [],
      "returnType": "Material",
      "description": "Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)",
      "custom": false
    },
    {
      "name": "IsMaterialReady",
      "params": [
        {
          "name": "material",
          "typ": "Material"
        }
      ],
      "returnType": "bool",
      "description": "Check if a material is ready",
      "custom": false
    },
    {
      "name": "UnloadMaterial",
      "params": [
        {
          "name": "material",
          "typ": "Material"
        }
      ],
      "returnType": "void",
      "description": "Unload material from GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "SetMaterialTexture",
      "params": [
        {
          "name": "material",
          "typ": "?[*]Material"
        },
        {
          "name": "mapType",
          "typ": "i32"
        },
        {
          "name": "texture",
          "typ": "Texture2D"
        }
      ],
      "returnType": "void",
      "description": "Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)",
      "custom": false
    },
    {
      "name": "SetModelMeshMaterial",
      "params": [
        {
          "name": "model",
          "typ": "?[*]Model"
        },
        {
          "name": "meshId",
          "typ": "i32"
        },
        {
          "name": "materialId",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set material for a mesh",
      "custom": false
    },
    {
      "name": "LoadModelAnimations",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        },
        {
          "name": "animCount",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "?[*]ModelAnimation",
      "description": "Load model animations from file",
      "custom": false
    },
    {
      "name": "UpdateModelAnimation",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "anim",
          "typ": "ModelAnimation"
        },
        {
          "name": "frame",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update model animation pose",
      "custom": false
    },
    {
      "name": "UnloadModelAnimation",
      "params": [
        {
          "name": "anim",
          "typ": "ModelAnimation"
        }
      ],
      "returnType": "void",
      "description": "Unload animation data",
      "custom": false
    },
    {
      "name": "UnloadModelAnimations",
      "params": [
        {
          "name": "animations",
          "typ": "?[*]ModelAnimation"
        },
        {
          "name": "animCount",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Unload animation array data",
      "custom": false
    },
    {
      "name": "IsModelAnimationValid",
      "params": [
        {
          "name": "model",
          "typ": "Model"
        },
        {
          "name": "anim",
          "typ": "ModelAnimation"
        }
      ],
      "returnType": "bool",
      "description": "Check model animation skeleton match",
      "custom": false
    },
    {
      "name": "CheckCollisionSpheres",
      "params": [
        {
          "name": "center1",
          "typ": "Vector3"
        },
        {
          "name": "radius1",
          "typ": "f32"
        },
        {
          "name": "center2",
          "typ": "Vector3"
        },
        {
          "name": "radius2",
          "typ": "f32"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between two spheres",
      "custom": false
    },
    {
      "name": "CheckCollisionBoxes",
      "params": [
        {
          "name": "box1",
          "typ": "BoundingBox"
        },
        {
          "name": "box2",
          "typ": "BoundingBox"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between two bounding boxes",
      "custom": false
    },
    {
      "name": "CheckCollisionBoxSphere",
      "params": [
        {
          "name": "box",
          "typ": "BoundingBox"
        },
        {
          "name": "center",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        }
      ],
      "returnType": "bool",
      "description": "Check collision between box and sphere",
      "custom": false
    },
    {
      "name": "GetRayCollisionSphere",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "center",
          "typ": "Vector3"
        },
        {
          "name": "radius",
          "typ": "f32"
        }
      ],
      "returnType": "RayCollision",
      "description": "Get collision info between ray and sphere",
      "custom": false
    },
    {
      "name": "GetRayCollisionBox",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "box",
          "typ": "BoundingBox"
        }
      ],
      "returnType": "RayCollision",
      "description": "Get collision info between ray and box",
      "custom": false
    },
    {
      "name": "GetRayCollisionMesh",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "mesh",
          "typ": "Mesh"
        },
        {
          "name": "transform",
          "typ": "Matrix"
        }
      ],
      "returnType": "RayCollision",
      "description": "Get collision info between ray and mesh",
      "custom": false
    },
    {
      "name": "GetRayCollisionTriangle",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "p1",
          "typ": "Vector3"
        },
        {
          "name": "p2",
          "typ": "Vector3"
        },
        {
          "name": "p3",
          "typ": "Vector3"
        }
      ],
      "returnType": "RayCollision",
      "description": "Get collision info between ray and triangle",
      "custom": false
    },
    {
      "name": "GetRayCollisionQuad",
      "params": [
        {
          "name": "ray",
          "typ": "Ray"
        },
        {
          "name": "p1",
          "typ": "Vector3"
        },
        {
          "name": "p2",
          "typ": "Vector3"
        },
        {
          "name": "p3",
          "typ": "Vector3"
        },
        {
          "name": "p4",
          "typ": "Vector3"
        }
      ],
      "returnType": "RayCollision",
      "description": "Get collision info between ray and quad",
      "custom": false
    },
    {
      "name": "InitAudioDevice",
      "params": [],
      "returnType": "void",
      "description": "Initialize audio device and context",
      "custom": false
    },
    {
      "name": "CloseAudioDevice",
      "params": [],
      "returnType": "void",
      "description": "Close the audio device and context",
      "custom": false
    },
    {
      "name": "IsAudioDeviceReady",
      "params": [],
      "returnType": "bool",
      "description": "Check if audio device has been initialized successfully",
      "custom": false
    },
    {
      "name": "SetMasterVolume",
      "params": [
        {
          "name": "volume",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set master volume (listener)",
      "custom": false
    },
    {
      "name": "LoadWave",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Wave",
      "description": "Load wave data from file",
      "custom": false
    },
    {
      "name": "LoadWaveFromMemory",
      "params": [
        {
          "name": "fileType",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fileData",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        }
      ],
      "returnType": "Wave",
      "description": "Load wave from memory buffer, fileType refers to extension: i.e. '.wav'",
      "custom": false
    },
    {
      "name": "IsWaveReady",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        }
      ],
      "returnType": "bool",
      "description": "Checks if wave data is ready",
      "custom": false
    },
    {
      "name": "LoadSound",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Sound",
      "description": "Load sound from file",
      "custom": false
    },
    {
      "name": "LoadSoundFromWave",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        }
      ],
      "returnType": "Sound",
      "description": "Load sound from wave data",
      "custom": false
    },
    {
      "name": "LoadSoundAlias",
      "params": [
        {
          "name": "source",
          "typ": "Sound"
        }
      ],
      "returnType": "Sound",
      "description": "Create a new sound that shares the same sample data as the source sound, does not own the sound data",
      "custom": false
    },
    {
      "name": "IsSoundReady",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "bool",
      "description": "Checks if a sound is ready",
      "custom": false
    },
    {
      "name": "UpdateSound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "sampleCount",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update sound buffer with new data",
      "custom": false
    },
    {
      "name": "UnloadWave",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        }
      ],
      "returnType": "void",
      "description": "Unload wave data",
      "custom": false
    },
    {
      "name": "UnloadSound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Unload sound",
      "custom": false
    },
    {
      "name": "UnloadSoundAlias",
      "params": [
        {
          "name": "alias",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Unload a sound alias (does not deallocate sample data)",
      "custom": false
    },
    {
      "name": "ExportWave",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export wave data to file, returns true on success",
      "custom": false
    },
    {
      "name": "ExportWaveAsCode",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        },
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "bool",
      "description": "Export wave sample data to code (.h), returns true on success",
      "custom": false
    },
    {
      "name": "PlaySound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Play a sound",
      "custom": false
    },
    {
      "name": "StopSound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Stop playing a sound",
      "custom": false
    },
    {
      "name": "PauseSound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Pause a sound",
      "custom": false
    },
    {
      "name": "ResumeSound",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "void",
      "description": "Resume a paused sound",
      "custom": false
    },
    {
      "name": "IsSoundPlaying",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        }
      ],
      "returnType": "bool",
      "description": "Check if a sound is currently playing",
      "custom": false
    },
    {
      "name": "SetSoundVolume",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        },
        {
          "name": "volume",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set volume for a sound (1.0 is max level)",
      "custom": false
    },
    {
      "name": "SetSoundPitch",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        },
        {
          "name": "pitch",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pitch for a sound (1.0 is base level)",
      "custom": false
    },
    {
      "name": "SetSoundPan",
      "params": [
        {
          "name": "sound",
          "typ": "Sound"
        },
        {
          "name": "pan",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pan for a sound (0.5 is center)",
      "custom": false
    },
    {
      "name": "WaveCopy",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        }
      ],
      "returnType": "Wave",
      "description": "Copy a wave to a new wave",
      "custom": false
    },
    {
      "name": "WaveCrop",
      "params": [
        {
          "name": "wave",
          "typ": "?[*]Wave"
        },
        {
          "name": "initSample",
          "typ": "i32"
        },
        {
          "name": "finalSample",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Crop a wave to defined samples range",
      "custom": false
    },
    {
      "name": "WaveFormat",
      "params": [
        {
          "name": "wave",
          "typ": "?[*]Wave"
        },
        {
          "name": "sampleRate",
          "typ": "i32"
        },
        {
          "name": "sampleSize",
          "typ": "i32"
        },
        {
          "name": "channels",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Convert wave data to desired format",
      "custom": false
    },
    {
      "name": "LoadWaveSamples",
      "params": [
        {
          "name": "wave",
          "typ": "Wave"
        }
      ],
      "returnType": "?[*]f32",
      "description": "Load samples data from wave as a 32bit float data array",
      "custom": false
    },
    {
      "name": "UnloadWaveSamples",
      "params": [
        {
          "name": "samples",
          "typ": "?[*]f32"
        }
      ],
      "returnType": "void",
      "description": "Unload samples data loaded with LoadWaveSamples()",
      "custom": false
    },
    {
      "name": "LoadMusicStream",
      "params": [
        {
          "name": "fileName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "Music",
      "description": "Load music stream from file",
      "custom": false
    },
    {
      "name": "LoadMusicStreamFromMemory",
      "params": [
        {
          "name": "fileType",
          "typ": "[*:0]const u8"
        },
        {
          "name": "data",
          "typ": "[*:0]const u8"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        }
      ],
      "returnType": "Music",
      "description": "Load music stream from data",
      "custom": false
    },
    {
      "name": "IsMusicReady",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "bool",
      "description": "Checks if a music stream is ready",
      "custom": false
    },
    {
      "name": "UnloadMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Unload music stream",
      "custom": false
    },
    {
      "name": "PlayMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Start music playing",
      "custom": false
    },
    {
      "name": "IsMusicStreamPlaying",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "bool",
      "description": "Check if music is playing",
      "custom": false
    },
    {
      "name": "UpdateMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Updates buffers for music streaming",
      "custom": false
    },
    {
      "name": "StopMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Stop music playing",
      "custom": false
    },
    {
      "name": "PauseMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Pause music playing",
      "custom": false
    },
    {
      "name": "ResumeMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "void",
      "description": "Resume playing paused music",
      "custom": false
    },
    {
      "name": "SeekMusicStream",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        },
        {
          "name": "position",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Seek music to a position (in seconds)",
      "custom": false
    },
    {
      "name": "SetMusicVolume",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        },
        {
          "name": "volume",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set volume for music (1.0 is max level)",
      "custom": false
    },
    {
      "name": "SetMusicPitch",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        },
        {
          "name": "pitch",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pitch for a music (1.0 is base level)",
      "custom": false
    },
    {
      "name": "SetMusicPan",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        },
        {
          "name": "pan",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pan for a music (0.5 is center)",
      "custom": false
    },
    {
      "name": "GetMusicTimeLength",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "f32",
      "description": "Get music time length (in seconds)",
      "custom": false
    },
    {
      "name": "GetMusicTimePlayed",
      "params": [
        {
          "name": "music",
          "typ": "Music"
        }
      ],
      "returnType": "f32",
      "description": "Get current music time played (in seconds)",
      "custom": false
    },
    {
      "name": "LoadAudioStream",
      "params": [
        {
          "name": "sampleRate",
          "typ": "u32"
        },
        {
          "name": "sampleSize",
          "typ": "u32"
        },
        {
          "name": "channels",
          "typ": "u32"
        }
      ],
      "returnType": "AudioStream",
      "description": "Load audio stream (to stream raw audio pcm data)",
      "custom": false
    },
    {
      "name": "IsAudioStreamReady",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "bool",
      "description": "Checks if an audio stream is ready",
      "custom": false
    },
    {
      "name": "UnloadAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "void",
      "description": "Unload audio stream and free memory",
      "custom": false
    },
    {
      "name": "UpdateAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "frameCount",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update audio stream buffers with data",
      "custom": false
    },
    {
      "name": "IsAudioStreamProcessed",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "bool",
      "description": "Check if any audio stream buffers requires refill",
      "custom": false
    },
    {
      "name": "PlayAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "void",
      "description": "Play audio stream",
      "custom": false
    },
    {
      "name": "PauseAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "void",
      "description": "Pause audio stream",
      "custom": false
    },
    {
      "name": "ResumeAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "void",
      "description": "Resume audio stream",
      "custom": false
    },
    {
      "name": "IsAudioStreamPlaying",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "bool",
      "description": "Check if audio stream is playing",
      "custom": false
    },
    {
      "name": "StopAudioStream",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        }
      ],
      "returnType": "void",
      "description": "Stop audio stream",
      "custom": false
    },
    {
      "name": "SetAudioStreamVolume",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "volume",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set volume for audio stream (1.0 is max level)",
      "custom": false
    },
    {
      "name": "SetAudioStreamPitch",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "pitch",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pitch for audio stream (1.0 is base level)",
      "custom": false
    },
    {
      "name": "SetAudioStreamPan",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "pan",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set pan for audio stream (0.5 is centered)",
      "custom": false
    },
    {
      "name": "SetAudioStreamBufferSizeDefault",
      "params": [
        {
          "name": "size",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Default size for new audio streams",
      "custom": false
    },
    {
      "name": "SetAudioStreamCallback",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "callback",
          "typ": "AudioCallback"
        }
      ],
      "returnType": "void",
      "description": "Audio thread callback to request new data",
      "custom": false
    },
    {
      "name": "AttachAudioStreamProcessor",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "processor",
          "typ": "AudioCallback"
        }
      ],
      "returnType": "void",
      "description": "Attach audio stream processor to stream, receives the samples as <float>s",
      "custom": false
    },
    {
      "name": "DetachAudioStreamProcessor",
      "params": [
        {
          "name": "stream",
          "typ": "AudioStream"
        },
        {
          "name": "processor",
          "typ": "AudioCallback"
        }
      ],
      "returnType": "void",
      "description": "Detach audio stream processor from stream",
      "custom": false
    },
    {
      "name": "AttachAudioMixedProcessor",
      "params": [
        {
          "name": "processor",
          "typ": "AudioCallback"
        }
      ],
      "returnType": "void",
      "description": "Attach audio stream processor to the entire audio pipeline, receives the samples as <float>s",
      "custom": false
    },
    {
      "name": "DetachAudioMixedProcessor",
      "params": [
        {
          "name": "processor",
          "typ": "AudioCallback"
        }
      ],
      "returnType": "void",
      "description": "Detach audio stream processor from the entire audio pipeline",
      "custom": false
    },
    {
      "name": "rlMatrixMode",
      "params": [
        {
          "name": "mode",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Choose the current matrix to be transformed",
      "custom": false
    },
    {
      "name": "rlPushMatrix",
      "params": [],
      "returnType": "void",
      "description": "Push the current matrix to stack",
      "custom": false
    },
    {
      "name": "rlPopMatrix",
      "params": [],
      "returnType": "void",
      "description": "Pop latest inserted matrix from stack",
      "custom": false
    },
    {
      "name": "rlLoadIdentity",
      "params": [],
      "returnType": "void",
      "description": "Reset current matrix to identity matrix",
      "custom": false
    },
    {
      "name": "rlTranslatef",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Multiply the current matrix by a translation matrix",
      "custom": false
    },
    {
      "name": "rlRotatef",
      "params": [
        {
          "name": "angle",
          "typ": "f32"
        },
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Multiply the current matrix by a rotation matrix",
      "custom": false
    },
    {
      "name": "rlScalef",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Multiply the current matrix by a scaling matrix",
      "custom": false
    },
    {
      "name": "rlMultMatrixf",
      "params": [
        {
          "name": "matf",
          "typ": "?[*]const f32"
        }
      ],
      "returnType": "void",
      "description": "Multiply the current matrix by another matrix",
      "custom": false
    },
    {
      "name": "rlFrustum",
      "params": [
        {
          "name": "left",
          "typ": "f64"
        },
        {
          "name": "right",
          "typ": "f64"
        },
        {
          "name": "bottom",
          "typ": "f64"
        },
        {
          "name": "top",
          "typ": "f64"
        },
        {
          "name": "znear",
          "typ": "f64"
        },
        {
          "name": "zfar",
          "typ": "f64"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlOrtho",
      "params": [
        {
          "name": "left",
          "typ": "f64"
        },
        {
          "name": "right",
          "typ": "f64"
        },
        {
          "name": "bottom",
          "typ": "f64"
        },
        {
          "name": "top",
          "typ": "f64"
        },
        {
          "name": "znear",
          "typ": "f64"
        },
        {
          "name": "zfar",
          "typ": "f64"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlViewport",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set the viewport area",
      "custom": false
    },
    {
      "name": "rlBegin",
      "params": [
        {
          "name": "mode",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Initialize drawing mode (how to organize vertex)",
      "custom": false
    },
    {
      "name": "rlEnd",
      "params": [],
      "returnType": "void",
      "description": "Finish vertex providing",
      "custom": false
    },
    {
      "name": "rlVertex2i",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (position) - 2 int",
      "custom": false
    },
    {
      "name": "rlVertex2f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (position) - 2 float",
      "custom": false
    },
    {
      "name": "rlVertex3f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (position) - 3 float",
      "custom": false
    },
    {
      "name": "rlTexCoord2f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (texture coordinate) - 2 float",
      "custom": false
    },
    {
      "name": "rlNormal3f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (normal) - 3 float",
      "custom": false
    },
    {
      "name": "rlColor4ub",
      "params": [
        {
          "name": "r",
          "typ": "u8"
        },
        {
          "name": "g",
          "typ": "u8"
        },
        {
          "name": "b",
          "typ": "u8"
        },
        {
          "name": "a",
          "typ": "u8"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (color) - 4 byte",
      "custom": false
    },
    {
      "name": "rlColor3f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (color) - 3 float",
      "custom": false
    },
    {
      "name": "rlColor4f",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        },
        {
          "name": "w",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Define one vertex (color) - 4 float",
      "custom": false
    },
    {
      "name": "rlEnableVertexArray",
      "params": [
        {
          "name": "vaoId",
          "typ": "u32"
        }
      ],
      "returnType": "bool",
      "description": "Enable vertex array (VAO, if supported)",
      "custom": false
    },
    {
      "name": "rlDisableVertexArray",
      "params": [],
      "returnType": "void",
      "description": "Disable vertex array (VAO, if supported)",
      "custom": false
    },
    {
      "name": "rlEnableVertexBuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable vertex buffer (VBO)",
      "custom": false
    },
    {
      "name": "rlDisableVertexBuffer",
      "params": [],
      "returnType": "void",
      "description": "Disable vertex buffer (VBO)",
      "custom": false
    },
    {
      "name": "rlEnableVertexBufferElement",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable vertex buffer element (VBO element)",
      "custom": false
    },
    {
      "name": "rlDisableVertexBufferElement",
      "params": [],
      "returnType": "void",
      "description": "Disable vertex buffer element (VBO element)",
      "custom": false
    },
    {
      "name": "rlEnableVertexAttribute",
      "params": [
        {
          "name": "index",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable vertex attribute index",
      "custom": false
    },
    {
      "name": "rlDisableVertexAttribute",
      "params": [
        {
          "name": "index",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Disable vertex attribute index",
      "custom": false
    },
    {
      "name": "rlEnableStatePointer",
      "params": [
        {
          "name": "vertexAttribType",
          "typ": "i32"
        },
        {
          "name": "buffer",
          "typ": "*anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Enable attribute state pointer",
      "custom": false
    },
    {
      "name": "rlDisableStatePointer",
      "params": [
        {
          "name": "vertexAttribType",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Disable attribute state pointer",
      "custom": false
    },
    {
      "name": "rlActiveTextureSlot",
      "params": [
        {
          "name": "slot",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Select and active a texture slot",
      "custom": false
    },
    {
      "name": "rlEnableTexture",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable texture",
      "custom": false
    },
    {
      "name": "rlDisableTexture",
      "params": [],
      "returnType": "void",
      "description": "Disable texture",
      "custom": false
    },
    {
      "name": "rlEnableTextureCubemap",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable texture cubemap",
      "custom": false
    },
    {
      "name": "rlDisableTextureCubemap",
      "params": [],
      "returnType": "void",
      "description": "Disable texture cubemap",
      "custom": false
    },
    {
      "name": "rlTextureParameters",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "param",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set texture parameters (filter, wrap)",
      "custom": false
    },
    {
      "name": "rlCubemapParameters",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "param",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set cubemap parameters (filter, wrap)",
      "custom": false
    },
    {
      "name": "rlEnableShader",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable shader program",
      "custom": false
    },
    {
      "name": "rlDisableShader",
      "params": [],
      "returnType": "void",
      "description": "Disable shader program",
      "custom": false
    },
    {
      "name": "rlEnableFramebuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Enable render texture (fbo)",
      "custom": false
    },
    {
      "name": "rlDisableFramebuffer",
      "params": [],
      "returnType": "void",
      "description": "Disable render texture (fbo), return to default framebuffer",
      "custom": false
    },
    {
      "name": "rlActiveDrawBuffers",
      "params": [
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Activate multiple draw color buffers",
      "custom": false
    },
    {
      "name": "rlEnableColorBlend",
      "params": [],
      "returnType": "void",
      "description": "Enable color blending",
      "custom": false
    },
    {
      "name": "rlDisableColorBlend",
      "params": [],
      "returnType": "void",
      "description": "Disable color blending",
      "custom": false
    },
    {
      "name": "rlEnableDepthTest",
      "params": [],
      "returnType": "void",
      "description": "Enable depth test",
      "custom": false
    },
    {
      "name": "rlDisableDepthTest",
      "params": [],
      "returnType": "void",
      "description": "Disable depth test",
      "custom": false
    },
    {
      "name": "rlEnableDepthMask",
      "params": [],
      "returnType": "void",
      "description": "Enable depth write",
      "custom": false
    },
    {
      "name": "rlDisableDepthMask",
      "params": [],
      "returnType": "void",
      "description": "Disable depth write",
      "custom": false
    },
    {
      "name": "rlEnableBackfaceCulling",
      "params": [],
      "returnType": "void",
      "description": "Enable backface culling",
      "custom": false
    },
    {
      "name": "rlDisableBackfaceCulling",
      "params": [],
      "returnType": "void",
      "description": "Disable backface culling",
      "custom": false
    },
    {
      "name": "rlSetCullFace",
      "params": [
        {
          "name": "mode",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set face culling mode",
      "custom": false
    },
    {
      "name": "rlEnableScissorTest",
      "params": [],
      "returnType": "void",
      "description": "Enable scissor test",
      "custom": false
    },
    {
      "name": "rlDisableScissorTest",
      "params": [],
      "returnType": "void",
      "description": "Disable scissor test",
      "custom": false
    },
    {
      "name": "rlScissor",
      "params": [
        {
          "name": "x",
          "typ": "i32"
        },
        {
          "name": "y",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Scissor test",
      "custom": false
    },
    {
      "name": "rlEnableWireMode",
      "params": [],
      "returnType": "void",
      "description": "Enable wire mode",
      "custom": false
    },
    {
      "name": "rlDisableWireMode",
      "params": [],
      "returnType": "void",
      "description": "Disable wire mode",
      "custom": false
    },
    {
      "name": "rlSetLineWidth",
      "params": [
        {
          "name": "width",
          "typ": "f32"
        }
      ],
      "returnType": "void",
      "description": "Set the line drawing width",
      "custom": false
    },
    {
      "name": "rlGetLineWidth",
      "params": [],
      "returnType": "f32",
      "description": "Get the line drawing width",
      "custom": false
    },
    {
      "name": "rlEnableSmoothLines",
      "params": [],
      "returnType": "void",
      "description": "Enable line aliasing",
      "custom": false
    },
    {
      "name": "rlDisableSmoothLines",
      "params": [],
      "returnType": "void",
      "description": "Disable line aliasing",
      "custom": false
    },
    {
      "name": "rlEnableStereoRender",
      "params": [],
      "returnType": "void",
      "description": "Enable stereo rendering",
      "custom": false
    },
    {
      "name": "rlDisableStereoRender",
      "params": [],
      "returnType": "void",
      "description": "Disable stereo rendering",
      "custom": false
    },
    {
      "name": "rlIsStereoRenderEnabled",
      "params": [],
      "returnType": "bool",
      "description": "Check if stereo render is enabled",
      "custom": false
    },
    {
      "name": "rlClearColor",
      "params": [
        {
          "name": "r",
          "typ": "u8"
        },
        {
          "name": "g",
          "typ": "u8"
        },
        {
          "name": "b",
          "typ": "u8"
        },
        {
          "name": "a",
          "typ": "u8"
        }
      ],
      "returnType": "void",
      "description": "Clear color buffer with color",
      "custom": false
    },
    {
      "name": "rlClearScreenBuffers",
      "params": [],
      "returnType": "void",
      "description": "Clear used screen buffers (color and depth)",
      "custom": false
    },
    {
      "name": "rlCheckErrors",
      "params": [],
      "returnType": "void",
      "description": "Check and log OpenGL error codes",
      "custom": false
    },
    {
      "name": "rlSetBlendMode",
      "params": [
        {
          "name": "mode",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set blending mode",
      "custom": false
    },
    {
      "name": "rlSetBlendFactors",
      "params": [
        {
          "name": "glSrcFactor",
          "typ": "i32"
        },
        {
          "name": "glDstFactor",
          "typ": "i32"
        },
        {
          "name": "glEquation",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set blending mode factor and equation (using OpenGL factors)",
      "custom": false
    },
    {
      "name": "rlSetBlendFactorsSeparate",
      "params": [
        {
          "name": "glSrcRGB",
          "typ": "i32"
        },
        {
          "name": "glDstRGB",
          "typ": "i32"
        },
        {
          "name": "glSrcAlpha",
          "typ": "i32"
        },
        {
          "name": "glDstAlpha",
          "typ": "i32"
        },
        {
          "name": "glEqRGB",
          "typ": "i32"
        },
        {
          "name": "glEqAlpha",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set blending mode factors and equations separately (using OpenGL factors)",
      "custom": false
    },
    {
      "name": "rlglInit",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Initialize rlgl (buffers, shaders, textures, states)",
      "custom": false
    },
    {
      "name": "rlglClose",
      "params": [],
      "returnType": "void",
      "description": "De-initialize rlgl (buffers, shaders, textures)",
      "custom": false
    },
    {
      "name": "rlLoadExtensions",
      "params": [
        {
          "name": "loader",
          "typ": "*anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Load OpenGL extensions (loader function required)",
      "custom": false
    },
    {
      "name": "rlGetVersion",
      "params": [],
      "returnType": "i32",
      "description": "Get current OpenGL version",
      "custom": false
    },
    {
      "name": "rlSetFramebufferWidth",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set current framebuffer width",
      "custom": false
    },
    {
      "name": "rlGetFramebufferWidth",
      "params": [],
      "returnType": "i32",
      "description": "Get default framebuffer width",
      "custom": false
    },
    {
      "name": "rlSetFramebufferHeight",
      "params": [
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set current framebuffer height",
      "custom": false
    },
    {
      "name": "rlGetFramebufferHeight",
      "params": [],
      "returnType": "i32",
      "description": "Get default framebuffer height",
      "custom": false
    },
    {
      "name": "rlGetTextureIdDefault",
      "params": [],
      "returnType": "u32",
      "description": "Get default texture id",
      "custom": false
    },
    {
      "name": "rlGetShaderIdDefault",
      "params": [],
      "returnType": "u32",
      "description": "Get default shader id",
      "custom": false
    },
    {
      "name": "rlGetShaderLocsDefault",
      "params": [],
      "returnType": "?[*]i32",
      "description": "Get default shader locations",
      "custom": false
    },
    {
      "name": "rlLoadRenderBatch",
      "params": [
        {
          "name": "numBuffers",
          "typ": "i32"
        },
        {
          "name": "bufferElements",
          "typ": "i32"
        }
      ],
      "returnType": "rlRenderBatch",
      "description": "Load a render batch system",
      "custom": false
    },
    {
      "name": "rlUnloadRenderBatch",
      "params": [
        {
          "name": "batch",
          "typ": "rlRenderBatch"
        }
      ],
      "returnType": "void",
      "description": "Unload render batch system",
      "custom": false
    },
    {
      "name": "rlDrawRenderBatch",
      "params": [
        {
          "name": "batch",
          "typ": "?[*]rlRenderBatch"
        }
      ],
      "returnType": "void",
      "description": "Draw render batch data (Update->Draw->Reset)",
      "custom": false
    },
    {
      "name": "rlSetRenderBatchActive",
      "params": [
        {
          "name": "batch",
          "typ": "?[*]rlRenderBatch"
        }
      ],
      "returnType": "void",
      "description": "Set the active render batch for rlgl (NULL for default internal)",
      "custom": false
    },
    {
      "name": "rlDrawRenderBatchActive",
      "params": [],
      "returnType": "void",
      "description": "Update and draw internal render batch",
      "custom": false
    },
    {
      "name": "rlCheckRenderBatchLimit",
      "params": [
        {
          "name": "vCount",
          "typ": "i32"
        }
      ],
      "returnType": "bool",
      "description": "Check internal buffer overflow for a given number of vertex",
      "custom": false
    },
    {
      "name": "rlSetTexture",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Set current texture for render batch and check buffers limits",
      "custom": false
    },
    {
      "name": "rlLoadVertexArray",
      "params": [],
      "returnType": "u32",
      "description": "Load vertex array (vao) if supported",
      "custom": false
    },
    {
      "name": "rlLoadVertexBuffer",
      "params": [
        {
          "name": "buffer",
          "typ": "*const anyopaque"
        },
        {
          "name": "size",
          "typ": "i32"
        },
        {
          "name": "dynamic",
          "typ": "bool"
        }
      ],
      "returnType": "u32",
      "description": "Load a vertex buffer attribute",
      "custom": false
    },
    {
      "name": "rlLoadVertexBufferElement",
      "params": [
        {
          "name": "buffer",
          "typ": "*const anyopaque"
        },
        {
          "name": "size",
          "typ": "i32"
        },
        {
          "name": "dynamic",
          "typ": "bool"
        }
      ],
      "returnType": "u32",
      "description": "Load a new attributes element buffer",
      "custom": false
    },
    {
      "name": "rlUpdateVertexBuffer",
      "params": [
        {
          "name": "bufferId",
          "typ": "u32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "offset",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update GPU buffer with new data",
      "custom": false
    },
    {
      "name": "rlUpdateVertexBufferElements",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "dataSize",
          "typ": "i32"
        },
        {
          "name": "offset",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Update vertex buffer elements with new data",
      "custom": false
    },
    {
      "name": "rlUnloadVertexArray",
      "params": [
        {
          "name": "vaoId",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlUnloadVertexBuffer",
      "params": [
        {
          "name": "vboId",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlCompileShader",
      "params": [
        {
          "name": "shaderCode",
          "typ": "[*:0]const u8"
        },
        {
          "name": "typ",
          "typ": "i32"
        }
      ],
      "returnType": "u32",
      "description": "Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)",
      "custom": true
    },
    {
      "name": "rlSetVertexAttributeDivisor",
      "params": [
        {
          "name": "index",
          "typ": "u32"
        },
        {
          "name": "divisor",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlSetVertexAttributeDefault",
      "params": [
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "*const anyopaque"
        },
        {
          "name": "attribType",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set vertex attribute default value",
      "custom": false
    },
    {
      "name": "rlDrawVertexArray",
      "params": [
        {
          "name": "offset",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlDrawVertexArrayElements",
      "params": [
        {
          "name": "offset",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        },
        {
          "name": "buffer",
          "typ": "*const anyopaque"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlDrawVertexArrayInstanced",
      "params": [
        {
          "name": "offset",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        },
        {
          "name": "instances",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlDrawVertexArrayElementsInstanced",
      "params": [
        {
          "name": "offset",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        },
        {
          "name": "buffer",
          "typ": "*const anyopaque"
        },
        {
          "name": "instances",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "rlLoadTexture",
      "params": [
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "mipmapCount",
          "typ": "i32"
        }
      ],
      "returnType": "u32",
      "description": "Load texture in GPU",
      "custom": false
    },
    {
      "name": "rlLoadTextureDepth",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "useRenderBuffer",
          "typ": "bool"
        }
      ],
      "returnType": "u32",
      "description": "Load depth texture/renderbuffer (to be attached to fbo)",
      "custom": false
    },
    {
      "name": "rlLoadTextureCubemap",
      "params": [
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "size",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        }
      ],
      "returnType": "u32",
      "description": "Load texture cubemap",
      "custom": false
    },
    {
      "name": "rlUpdateTexture",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "offsetX",
          "typ": "i32"
        },
        {
          "name": "offsetY",
          "typ": "i32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        }
      ],
      "returnType": "void",
      "description": "Update GPU texture with new data",
      "custom": false
    },
    {
      "name": "rlGetGlTextureFormats",
      "params": [
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "glInternalFormat",
          "typ": "?[*]u32"
        },
        {
          "name": "glFormat",
          "typ": "?[*]u32"
        },
        {
          "name": "glType",
          "typ": "?[*]u32"
        }
      ],
      "returnType": "void",
      "description": "Get OpenGL internal formats",
      "custom": false
    },
    {
      "name": "rlGetPixelFormatName",
      "params": [
        {
          "name": "format",
          "typ": "u32"
        }
      ],
      "returnType": "[*:0]const u8",
      "description": "Get name string for pixel format",
      "custom": false
    },
    {
      "name": "rlUnloadTexture",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Unload texture from GPU memory",
      "custom": false
    },
    {
      "name": "rlGenTextureMipmaps",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "mipmaps",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "void",
      "description": "Generate mipmap data for selected texture",
      "custom": false
    },
    {
      "name": "rlReadTexturePixels",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        },
        {
          "name": "format",
          "typ": "i32"
        }
      ],
      "returnType": "*anyopaque",
      "description": "Read texture pixel data",
      "custom": false
    },
    {
      "name": "rlReadScreenPixels",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "?[*]u8",
      "description": "Read screen pixel data (color buffer)",
      "custom": false
    },
    {
      "name": "rlLoadFramebuffer",
      "params": [
        {
          "name": "width",
          "typ": "i32"
        },
        {
          "name": "height",
          "typ": "i32"
        }
      ],
      "returnType": "u32",
      "description": "Load an empty framebuffer",
      "custom": false
    },
    {
      "name": "rlFramebufferAttach",
      "params": [
        {
          "name": "fboId",
          "typ": "u32"
        },
        {
          "name": "texId",
          "typ": "u32"
        },
        {
          "name": "attachType",
          "typ": "i32"
        },
        {
          "name": "texType",
          "typ": "i32"
        },
        {
          "name": "mipLevel",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Attach texture/renderbuffer to a framebuffer",
      "custom": false
    },
    {
      "name": "rlFramebufferComplete",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "bool",
      "description": "Verify framebuffer is complete",
      "custom": false
    },
    {
      "name": "rlUnloadFramebuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Delete framebuffer from GPU",
      "custom": false
    },
    {
      "name": "rlLoadShaderCode",
      "params": [
        {
          "name": "vsCode",
          "typ": "[*:0]const u8"
        },
        {
          "name": "fsCode",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "u32",
      "description": "Load shader from code strings",
      "custom": false
    },
    {
      "name": "TextSplit",
      "params": [
        {
          "name": "text",
          "typ": "[*:0]const u8"
        },
        {
          "name": "delimiter",
          "typ": "u8"
        },
        {
          "name": "count",
          "typ": "[*]i32"
        }
      ],
      "returnType": "[*]const [*:0]const u8",
      "description": "overriden in inject.zig",
      "custom": true
    },
    {
      "name": "rlLoadShaderProgram",
      "params": [
        {
          "name": "vShaderId",
          "typ": "u32"
        },
        {
          "name": "fShaderId",
          "typ": "u32"
        }
      ],
      "returnType": "u32",
      "description": "Load custom shader program",
      "custom": false
    },
    {
      "name": "rlUnloadShaderProgram",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Unload shader program",
      "custom": false
    },
    {
      "name": "rlGetLocationUniform",
      "params": [
        {
          "name": "shaderId",
          "typ": "u32"
        },
        {
          "name": "uniformName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get shader location uniform",
      "custom": false
    },
    {
      "name": "rlGetLocationAttrib",
      "params": [
        {
          "name": "shaderId",
          "typ": "u32"
        },
        {
          "name": "attribName",
          "typ": "[*:0]const u8"
        }
      ],
      "returnType": "i32",
      "description": "Get shader location attribute",
      "custom": false
    },
    {
      "name": "rlSetUniform",
      "params": [
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "value",
          "typ": "*const anyopaque"
        },
        {
          "name": "uniformType",
          "typ": "i32"
        },
        {
          "name": "count",
          "typ": "i32"
        }
      ],
      "returnType": "void",
      "description": "Set shader value uniform",
      "custom": false
    },
    {
      "name": "rlSetUniformMatrix",
      "params": [
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set shader value matrix",
      "custom": false
    },
    {
      "name": "rlSetUniformSampler",
      "params": [
        {
          "name": "locIndex",
          "typ": "i32"
        },
        {
          "name": "textureId",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Set shader value sampler",
      "custom": false
    },
    {
      "name": "rlSetShader",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "locs",
          "typ": "?[*]i32"
        }
      ],
      "returnType": "void",
      "description": "Set shader currently active (id and locations)",
      "custom": false
    },
    {
      "name": "rlLoadComputeShaderProgram",
      "params": [
        {
          "name": "shaderId",
          "typ": "u32"
        }
      ],
      "returnType": "u32",
      "description": "Load compute shader program",
      "custom": false
    },
    {
      "name": "rlComputeShaderDispatch",
      "params": [
        {
          "name": "groupX",
          "typ": "u32"
        },
        {
          "name": "groupY",
          "typ": "u32"
        },
        {
          "name": "groupZ",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Dispatch compute shader (equivalent to *draw* for graphics pipeline)",
      "custom": false
    },
    {
      "name": "rlLoadShaderBuffer",
      "params": [
        {
          "name": "size",
          "typ": "u32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "usageHint",
          "typ": "i32"
        }
      ],
      "returnType": "u32",
      "description": "Load shader storage buffer object (SSBO)",
      "custom": false
    },
    {
      "name": "rlUnloadShaderBuffer",
      "params": [
        {
          "name": "ssboId",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Unload shader storage buffer object (SSBO)",
      "custom": false
    },
    {
      "name": "rlUpdateShaderBuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "data",
          "typ": "*const anyopaque"
        },
        {
          "name": "dataSize",
          "typ": "u32"
        },
        {
          "name": "offset",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Update SSBO buffer data",
      "custom": false
    },
    {
      "name": "rlBindShaderBuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "index",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Bind SSBO buffer",
      "custom": false
    },
    {
      "name": "rlReadShaderBuffer",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "dest",
          "typ": "*anyopaque"
        },
        {
          "name": "count",
          "typ": "u32"
        },
        {
          "name": "offset",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Read SSBO buffer data (GPU->CPU)",
      "custom": false
    },
    {
      "name": "rlCopyShaderBuffer",
      "params": [
        {
          "name": "destId",
          "typ": "u32"
        },
        {
          "name": "srcId",
          "typ": "u32"
        },
        {
          "name": "destOffset",
          "typ": "u32"
        },
        {
          "name": "srcOffset",
          "typ": "u32"
        },
        {
          "name": "count",
          "typ": "u32"
        }
      ],
      "returnType": "void",
      "description": "Copy SSBO data between buffers",
      "custom": false
    },
    {
      "name": "rlGetShaderBufferSize",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        }
      ],
      "returnType": "u32",
      "description": "Get SSBO buffer size",
      "custom": false
    },
    {
      "name": "rlBindImageTexture",
      "params": [
        {
          "name": "id",
          "typ": "u32"
        },
        {
          "name": "index",
          "typ": "u32"
        },
        {
          "name": "format",
          "typ": "i32"
        },
        {
          "name": "readonly",
          "typ": "bool"
        }
      ],
      "returnType": "void",
      "description": "Bind image texture",
      "custom": false
    },
    {
      "name": "rlGetMatrixModelview",
      "params": [],
      "returnType": "Matrix",
      "description": "Get internal modelview matrix",
      "custom": false
    },
    {
      "name": "rlGetMatrixProjection",
      "params": [],
      "returnType": "Matrix",
      "description": "Get internal projection matrix",
      "custom": false
    },
    {
      "name": "rlGetMatrixTransform",
      "params": [],
      "returnType": "Matrix",
      "description": "Get internal accumulated transform matrix",
      "custom": false
    },
    {
      "name": "rlGetMatrixProjectionStereo",
      "params": [
        {
          "name": "eye",
          "typ": "i32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "rlGetMatrixViewOffsetStereo",
      "params": [
        {
          "name": "eye",
          "typ": "i32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "rlSetMatrixProjection",
      "params": [
        {
          "name": "proj",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set a custom projection matrix (replaces internal projection matrix)",
      "custom": false
    },
    {
      "name": "rlSetMatrixModelview",
      "params": [
        {
          "name": "view",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set a custom modelview matrix (replaces internal modelview matrix)",
      "custom": false
    },
    {
      "name": "rlSetMatrixProjectionStereo",
      "params": [
        {
          "name": "right",
          "typ": "Matrix"
        },
        {
          "name": "left",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set eyes projection matrices for stereo rendering",
      "custom": false
    },
    {
      "name": "rlSetMatrixViewOffsetStereo",
      "params": [
        {
          "name": "right",
          "typ": "Matrix"
        },
        {
          "name": "left",
          "typ": "Matrix"
        }
      ],
      "returnType": "void",
      "description": "Set eyes view offsets matrices for stereo rendering",
      "custom": false
    },
    {
      "name": "rlLoadDrawCube",
      "params": [],
      "returnType": "void",
      "description": "Load and draw a cube",
      "custom": false
    },
    {
      "name": "rlLoadDrawQuad",
      "params": [],
      "returnType": "void",
      "description": "Load and draw a quad",
      "custom": false
    },
    {
      "name": "Clamp",
      "params": [
        {
          "name": "value",
          "typ": "f32"
        },
        {
          "name": "min",
          "typ": "f32"
        },
        {
          "name": "max",
          "typ": "f32"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Lerp",
      "params": [
        {
          "name": "start",
          "typ": "f32"
        },
        {
          "name": "end",
          "typ": "f32"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Normalize",
      "params": [
        {
          "name": "value",
          "typ": "f32"
        },
        {
          "name": "start",
          "typ": "f32"
        },
        {
          "name": "end",
          "typ": "f32"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Remap",
      "params": [
        {
          "name": "value",
          "typ": "f32"
        },
        {
          "name": "inputStart",
          "typ": "f32"
        },
        {
          "name": "inputEnd",
          "typ": "f32"
        },
        {
          "name": "outputStart",
          "typ": "f32"
        },
        {
          "name": "outputEnd",
          "typ": "f32"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Wrap",
      "params": [
        {
          "name": "value",
          "typ": "f32"
        },
        {
          "name": "min",
          "typ": "f32"
        },
        {
          "name": "max",
          "typ": "f32"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "FloatEquals",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        }
      ],
      "returnType": "i32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Zero",
      "params": [],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2One",
      "params": [],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Add",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2AddValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "add",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Subtract",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2SubtractValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "sub",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Length",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2LengthSqr",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2DotProduct",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Distance",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2DistanceSqr",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Angle",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2LineAngle",
      "params": [
        {
          "name": "start",
          "typ": "Vector2"
        },
        {
          "name": "end",
          "typ": "Vector2"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Scale",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "scale",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Multiply",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Negate",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Divide",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Normalize",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Transform",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Lerp",
      "params": [
        {
          "name": "v1",
          "typ": "Vector2"
        },
        {
          "name": "v2",
          "typ": "Vector2"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Reflect",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "normal",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Rotate",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2MoveTowards",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "target",
          "typ": "Vector2"
        },
        {
          "name": "maxDistance",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Invert",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Clamp",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "min",
          "typ": "Vector2"
        },
        {
          "name": "max",
          "typ": "Vector2"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2ClampValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector2"
        },
        {
          "name": "min",
          "typ": "f32"
        },
        {
          "name": "max",
          "typ": "f32"
        }
      ],
      "returnType": "Vector2",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector2Equals",
      "params": [
        {
          "name": "p",
          "typ": "Vector2"
        },
        {
          "name": "q",
          "typ": "Vector2"
        }
      ],
      "returnType": "i32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Zero",
      "params": [],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3One",
      "params": [],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Add",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3AddValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "add",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Subtract",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3SubtractValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "sub",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Scale",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "scalar",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Multiply",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3CrossProduct",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Perpendicular",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Length",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3LengthSqr",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3DotProduct",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Distance",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3DistanceSqr",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Angle",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Negate",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Divide",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Normalize",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Project",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Reject",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3OrthoNormalize",
      "params": [
        {
          "name": "v1",
          "typ": "?[*]Vector3"
        },
        {
          "name": "v2",
          "typ": "?[*]Vector3"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Transform",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3RotateByQuaternion",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3RotateByAxisAngle",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "axis",
          "typ": "Vector3"
        },
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Lerp",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Reflect",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "normal",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Min",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Max",
      "params": [
        {
          "name": "v1",
          "typ": "Vector3"
        },
        {
          "name": "v2",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Barycenter",
      "params": [
        {
          "name": "p",
          "typ": "Vector3"
        },
        {
          "name": "a",
          "typ": "Vector3"
        },
        {
          "name": "b",
          "typ": "Vector3"
        },
        {
          "name": "c",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Unproject",
      "params": [
        {
          "name": "source",
          "typ": "Vector3"
        },
        {
          "name": "projection",
          "typ": "Matrix"
        },
        {
          "name": "view",
          "typ": "Matrix"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3ToFloatV",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "float3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Invert",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Clamp",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "min",
          "typ": "Vector3"
        },
        {
          "name": "max",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3ClampValue",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "min",
          "typ": "f32"
        },
        {
          "name": "max",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Equals",
      "params": [
        {
          "name": "p",
          "typ": "Vector3"
        },
        {
          "name": "q",
          "typ": "Vector3"
        }
      ],
      "returnType": "i32",
      "description": "",
      "custom": false
    },
    {
      "name": "Vector3Refract",
      "params": [
        {
          "name": "v",
          "typ": "Vector3"
        },
        {
          "name": "n",
          "typ": "Vector3"
        },
        {
          "name": "r",
          "typ": "f32"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixDeterminant",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixTrace",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixTranspose",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixInvert",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixIdentity",
      "params": [],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixAdd",
      "params": [
        {
          "name": "left",
          "typ": "Matrix"
        },
        {
          "name": "right",
          "typ": "Matrix"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixSubtract",
      "params": [
        {
          "name": "left",
          "typ": "Matrix"
        },
        {
          "name": "right",
          "typ": "Matrix"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixMultiply",
      "params": [
        {
          "name": "left",
          "typ": "Matrix"
        },
        {
          "name": "right",
          "typ": "Matrix"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixTranslate",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotate",
      "params": [
        {
          "name": "axis",
          "typ": "Vector3"
        },
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotateX",
      "params": [
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotateY",
      "params": [
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotateZ",
      "params": [
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotateXYZ",
      "params": [
        {
          "name": "angle",
          "typ": "Vector3"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixRotateZYX",
      "params": [
        {
          "name": "angle",
          "typ": "Vector3"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixScale",
      "params": [
        {
          "name": "x",
          "typ": "f32"
        },
        {
          "name": "y",
          "typ": "f32"
        },
        {
          "name": "z",
          "typ": "f32"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixFrustum",
      "params": [
        {
          "name": "left",
          "typ": "f64"
        },
        {
          "name": "right",
          "typ": "f64"
        },
        {
          "name": "bottom",
          "typ": "f64"
        },
        {
          "name": "top",
          "typ": "f64"
        },
        {
          "name": "near",
          "typ": "f64"
        },
        {
          "name": "far",
          "typ": "f64"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixPerspective",
      "params": [
        {
          "name": "fovY",
          "typ": "f64"
        },
        {
          "name": "aspect",
          "typ": "f64"
        },
        {
          "name": "nearPlane",
          "typ": "f64"
        },
        {
          "name": "farPlane",
          "typ": "f64"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixOrtho",
      "params": [
        {
          "name": "left",
          "typ": "f64"
        },
        {
          "name": "right",
          "typ": "f64"
        },
        {
          "name": "bottom",
          "typ": "f64"
        },
        {
          "name": "top",
          "typ": "f64"
        },
        {
          "name": "nearPlane",
          "typ": "f64"
        },
        {
          "name": "farPlane",
          "typ": "f64"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixLookAt",
      "params": [
        {
          "name": "eye",
          "typ": "Vector3"
        },
        {
          "name": "target",
          "typ": "Vector3"
        },
        {
          "name": "up",
          "typ": "Vector3"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "MatrixToFloatV",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "float16",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionAdd",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionAddValue",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        },
        {
          "name": "add",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionSubtract",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionSubtractValue",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        },
        {
          "name": "sub",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionIdentity",
      "params": [],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionLength",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "f32",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionNormalize",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionInvert",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionMultiply",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionScale",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        },
        {
          "name": "mul",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionDivide",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionLerp",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionNlerp",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionSlerp",
      "params": [
        {
          "name": "q1",
          "typ": "Vector4"
        },
        {
          "name": "q2",
          "typ": "Vector4"
        },
        {
          "name": "amount",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionFromVector3ToVector3",
      "params": [
        {
          "name": "from",
          "typ": "Vector3"
        },
        {
          "name": "to",
          "typ": "Vector3"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionFromMatrix",
      "params": [
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionToMatrix",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "Matrix",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionFromAxisAngle",
      "params": [
        {
          "name": "axis",
          "typ": "Vector3"
        },
        {
          "name": "angle",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionToAxisAngle",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        },
        {
          "name": "outAxis",
          "typ": "?[*]Vector3"
        },
        {
          "name": "outAngle",
          "typ": "?[*]f32"
        }
      ],
      "returnType": "void",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionFromEuler",
      "params": [
        {
          "name": "pitch",
          "typ": "f32"
        },
        {
          "name": "yaw",
          "typ": "f32"
        },
        {
          "name": "roll",
          "typ": "f32"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionToEuler",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "Vector3",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionTransform",
      "params": [
        {
          "name": "q",
          "typ": "Vector4"
        },
        {
          "name": "mat",
          "typ": "Matrix"
        }
      ],
      "returnType": "Vector4",
      "description": "",
      "custom": false
    },
    {
      "name": "QuaternionEquals",
      "params": [
        {
          "name": "p",
          "typ": "Vector4"
        },
        {
          "name": "q",
          "typ": "Vector4"
        }
      ],
      "returnType": "i32",
      "description": "",
      "custom": false
    },
    {
      "name": "TextAppend",
      "params": [
        {
          "name": "text",
          "typ": "[*]u8"
        },
        {
          "name": "append",
          "typ": "[*:0]const u8"
        },
        {
          "name": "position",
          "typ": "[*]i32"
        }
      ],
      "returnType": "void",
      "description": "overriden in inject.zig",
      "custom": true
    }
  ],
  "enums": [
    {
      "name": "ConfigFlags",
      "values": [
        {
          "name": "FLAG_VSYNC_HINT",
          "value": 64,
          "description": "Set to try enabling V-Sync on GPU"
        },
        {
          "name": "FLAG_FULLSCREEN_MODE",
          "value": 2,
          "description": "Set to run program in fullscreen"
        },
        {
          "name": "FLAG_WINDOW_RESIZABLE",
          "value": 4,
          "description": "Set to allow resizable window"
        },
        {
          "name": "FLAG_WINDOW_UNDECORATED",
          "value": 8,
          "description": "Set to disable window decoration (frame and buttons)"
        },
        {
          "name": "FLAG_WINDOW_HIDDEN",
          "value": 128,
          "description": "Set to hide window"
        },
        {
          "name": "FLAG_WINDOW_MINIMIZED",
          "value": 512,
          "description": "Set to minimize window (iconify)"
        },
        {
          "name": "FLAG_WINDOW_MAXIMIZED",
          "value": 1024,
          "description": "Set to maximize window (expanded to monitor)"
        },
        {
          "name": "FLAG_WINDOW_UNFOCUSED",
          "value": 2048,
          "description": "Set to window non focused"
        },
        {
          "name": "FLAG_WINDOW_TOPMOST",
          "value": 4096,
          "description": "Set to window always on top"
        },
        {
          "name": "FLAG_WINDOW_ALWAYS_RUN",
          "value": 256,
          "description": "Set to allow windows running while minimized"
        },
        {
          "name": "FLAG_WINDOW_TRANSPARENT",
          "value": 16,
          "description": "Set to allow transparent framebuffer"
        },
        {
          "name": "FLAG_WINDOW_HIGHDPI",
          "value": 8192,
          "description": "Set to support HighDPI"
        },
        {
          "name": "FLAG_WINDOW_MOUSE_PASSTHROUGH",
          "value": 16384,
          "description": "Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED"
        },
        {
          "name": "FLAG_BORDERLESS_WINDOWED_MODE",
          "value": 32768,
          "description": "Set to run program in borderless windowed mode"
        },
        {
          "name": "FLAG_MSAA_4X_HINT",
          "value": 32,
          "description": "Set to try enabling MSAA 4X"
        },
        {
          "name": "FLAG_INTERLACED_HINT",
          "value": 65536,
          "description": "Set to try enabling interlaced video format (for V3D)"
        }
      ],
      "description": "System/Window config flags",
      "custom": false
    },
    {
      "name": "TraceLogLevel",
      "values": [
        {
          "name": "LOG_ALL",
          "value": 0,
          "description": "Display all logs"
        },
        {
          "name": "LOG_TRACE",
          "value": 1,
          "description": "Trace logging, intended for internal use only"
        },
        {
          "name": "LOG_DEBUG",
          "value": 2,
          "description": "Debug logging, used for internal debugging, it should be disabled on release builds"
        },
        {
          "name": "LOG_INFO",
          "value": 3,
          "description": "Info logging, used for program execution info"
        },
        {
          "name": "LOG_WARNING",
          "value": 4,
          "description": "Warning logging, used on recoverable failures"
        },
        {
          "name": "LOG_ERROR",
          "value": 5,
          "description": "Error logging, used on unrecoverable failures"
        },
        {
          "name": "LOG_FATAL",
          "value": 6,
          "description": "Fatal logging, used to abort program: exit(EXIT_FAILURE)"
        },
        {
          "name": "LOG_NONE",
          "value": 7,
          "description": "Disable logging"
        }
      ],
      "description": "Trace log level",
      "custom": false
    },
    {
      "name": "KeyboardKey",
      "values": [
        {
          "name": "KEY_NULL",
          "value": 0,
          "description": "Key: NULL, used for no key pressed"
        },
        {
          "name": "KEY_APOSTROPHE",
          "value": 39,
          "description": "Key: '"
        },
        {
          "name": "KEY_COMMA",
          "value": 44,
          "description": "Key: ,"
        },
        {
          "name": "KEY_MINUS",
          "value": 45,
          "description": "Key: -"
        },
        {
          "name": "KEY_PERIOD",
          "value": 46,
          "description": "Key: ."
        },
        {
          "name": "KEY_SLASH",
          "value": 47,
          "description": "Key: /"
        },
        {
          "name": "KEY_ZERO",
          "value": 48,
          "description": "Key: 0"
        },
        {
          "name": "KEY_ONE",
          "value": 49,
          "description": "Key: 1"
        },
        {
          "name": "KEY_TWO",
          "value": 50,
          "description": "Key: 2"
        },
        {
          "name": "KEY_THREE",
          "value": 51,
          "description": "Key: 3"
        },
        {
          "name": "KEY_FOUR",
          "value": 52,
          "description": "Key: 4"
        },
        {
          "name": "KEY_FIVE",
          "value": 53,
          "description": "Key: 5"
        },
        {
          "name": "KEY_SIX",
          "value": 54,
          "description": "Key: 6"
        },
        {
          "name": "KEY_SEVEN",
          "value": 55,
          "description": "Key: 7"
        },
        {
          "name": "KEY_EIGHT",
          "value": 56,
          "description": "Key: 8"
        },
        {
          "name": "KEY_NINE",
          "value": 57,
          "description": "Key: 9"
        },
        {
          "name": "KEY_SEMICOLON",
          "value": 59,
          "description": "Key: ;"
        },
        {
          "name": "KEY_EQUAL",
          "value": 61,
          "description": "Key: ="
        },
        {
          "name": "KEY_A",
          "value": 65,
          "description": "Key: A | a"
        },
        {
          "name": "KEY_B",
          "value": 66,
          "description": "Key: B | b"
        },
        {
          "name": "KEY_C",
          "value": 67,
          "description": "Key: C | c"
        },
        {
          "name": "KEY_D",
          "value": 68,
          "description": "Key: D | d"
        },
        {
          "name": "KEY_E",
          "value": 69,
          "description": "Key: E | e"
        },
        {
          "name": "KEY_F",
          "value": 70,
          "description": "Key: F | f"
        },
        {
          "name": "KEY_G",
          "value": 71,
          "description": "Key: G | g"
        },
        {
          "name": "KEY_H",
          "value": 72,
          "description": "Key: H | h"
        },
        {
          "name": "KEY_I",
          "value": 73,
          "description": "Key: I | i"
        },
        {
          "name": "KEY_J",
          "value": 74,
          "description": "Key: J | j"
        },
        {
          "name": "KEY_K",
          "value": 75,
          "description": "Key: K | k"
        },
        {
          "name": "KEY_L",
          "value": 76,
          "description": "Key: L | l"
        },
        {
          "name": "KEY_M",
          "value": 77,
          "description": "Key: M | m"
        },
        {
          "name": "KEY_N",
          "value": 78,
          "description": "Key: N | n"
        },
        {
          "name": "KEY_O",
          "value": 79,
          "description": "Key: O | o"
        },
        {
          "name": "KEY_P",
          "value": 80,
          "description": "Key: P | p"
        },
        {
          "name": "KEY_Q",
          "value": 81,
          "description": "Key: Q | q"
        },
        {
          "name": "KEY_R",
          "value": 82,
          "description": "Key: R | r"
        },
        {
          "name": "KEY_S",
          "value": 83,
          "description": "Key: S | s"
        },
        {
          "name": "KEY_T",
          "value": 84,
          "description": "Key: T | t"
        },
        {
          "name": "KEY_U",
          "value": 85,
          "description": "Key: U | u"
        },
        {
          "name": "KEY_V",
          "value": 86,
          "description": "Key: V | v"
        },
        {
          "name": "KEY_W",
          "value": 87,
          "description": "Key: W | w"
        },
        {
          "name": "KEY_X",
          "value": 88,
          "description": "Key: X | x"
        },
        {
          "name": "KEY_Y",
          "value": 89,
          "description": "Key: Y | y"
        },
        {
          "name": "KEY_Z",
          "value": 90,
          "description": "Key: Z | z"
        },
        {
          "name": "KEY_LEFT_BRACKET",
          "value": 91,
          "description": "Key: ["
        },
        {
          "name": "KEY_BACKSLASH",
          "value": 92,
          "description": "Key: '\\'"
        },
        {
          "name": "KEY_RIGHT_BRACKET",
          "value": 93,
          "description": "Key: ]"
        },
        {
          "name": "KEY_GRAVE",
          "value": 96,
          "description": "Key: `"
        },
        {
          "name": "KEY_SPACE",
          "value": 32,
          "description": "Key: Space"
        },
        {
          "name": "KEY_ESCAPE",
          "value": 256,
          "description": "Key: Esc"
        },
        {
          "name": "KEY_ENTER",
          "value": 257,
          "description": "Key: Enter"
        },
        {
          "name": "KEY_TAB",
          "value": 258,
          "description": "Key: Tab"
        },
        {
          "name": "KEY_BACKSPACE",
          "value": 259,
          "description": "Key: Backspace"
        },
        {
          "name": "KEY_INSERT",
          "value": 260,
          "description": "Key: Ins"
        },
        {
          "name": "KEY_DELETE",
          "value": 261,
          "description": "Key: Del"
        },
        {
          "name": "KEY_RIGHT",
          "value": 262,
          "description": "Key: Cursor right"
        },
        {
          "name": "KEY_LEFT",
          "value": 263,
          "description": "Key: Cursor left"
        },
        {
          "name": "KEY_DOWN",
          "value": 264,
          "description": "Key: Cursor down"
        },
        {
          "name": "KEY_UP",
          "value": 265,
          "description": "Key: Cursor up"
        },
        {
          "name": "KEY_PAGE_UP",
          "value": 266,
          "description": "Key: Page up"
        },
        {
          "name": "KEY_PAGE_DOWN",
          "value": 267,
          "description": "Key: Page down"
        },
        {
          "name": "KEY_HOME",
          "value": 268,
          "description": "Key: Home"
        },
        {
          "name": "KEY_END",
          "value": 269,
          "description": "Key: End"
        },
        {
          "name": "KEY_CAPS_LOCK",
          "value": 280,
          "description": "Key: Caps lock"
        },
        {
          "name": "KEY_SCROLL_LOCK",
          "value": 281,
          "description": "Key: Scroll down"
        },
        {
          "name": "KEY_NUM_LOCK",
          "value": 282,
          "description": "Key: Num lock"
        },
        {
          "name": "KEY_PRINT_SCREEN",
          "value": 283,
          "description": "Key: Print screen"
        },
        {
          "name": "KEY_PAUSE",
          "value": 284,
          "description": "Key: Pause"
        },
        {
          "name": "KEY_F1",
          "value": 290,
          "description": "Key: F1"
        },
        {
          "name": "KEY_F2",
          "value": 291,
          "description": "Key: F2"
        },
        {
          "name": "KEY_F3",
          "value": 292,
          "description": "Key: F3"
        },
        {
          "name": "KEY_F4",
          "value": 293,
          "description": "Key: F4"
        },
        {
          "name": "KEY_F5",
          "value": 294,
          "description": "Key: F5"
        },
        {
          "name": "KEY_F6",
          "value": 295,
          "description": "Key: F6"
        },
        {
          "name": "KEY_F7",
          "value": 296,
          "description": "Key: F7"
        },
        {
          "name": "KEY_F8",
          "value": 297,
          "description": "Key: F8"
        },
        {
          "name": "KEY_F9",
          "value": 298,
          "description": "Key: F9"
        },
        {
          "name": "KEY_F10",
          "value": 299,
          "description": "Key: F10"
        },
        {
          "name": "KEY_F11",
          "value": 300,
          "description": "Key: F11"
        },
        {
          "name": "KEY_F12",
          "value": 301,
          "description": "Key: F12"
        },
        {
          "name": "KEY_LEFT_SHIFT",
          "value": 340,
          "description": "Key: Shift left"
        },
        {
          "name": "KEY_LEFT_CONTROL",
          "value": 341,
          "description": "Key: Control left"
        },
        {
          "name": "KEY_LEFT_ALT",
          "value": 342,
          "description": "Key: Alt left"
        },
        {
          "name": "KEY_LEFT_SUPER",
          "value": 343,
          "description": "Key: Super left"
        },
        {
          "name": "KEY_RIGHT_SHIFT",
          "value": 344,
          "description": "Key: Shift right"
        },
        {
          "name": "KEY_RIGHT_CONTROL",
          "value": 345,
          "description": "Key: Control right"
        },
        {
          "name": "KEY_RIGHT_ALT",
          "value": 346,
          "description": "Key: Alt right"
        },
        {
          "name": "KEY_RIGHT_SUPER",
          "value": 347,
          "description": "Key: Super right"
        },
        {
          "name": "KEY_KB_MENU",
          "value": 348,
          "description": "Key: KB menu"
        },
        {
          "name": "KEY_KP_0",
          "value": 320,
          "description": "Key: Keypad 0"
        },
        {
          "name": "KEY_KP_1",
          "value": 321,
          "description": "Key: Keypad 1"
        },
        {
          "name": "KEY_KP_2",
          "value": 322,
          "description": "Key: Keypad 2"
        },
        {
          "name": "KEY_KP_3",
          "value": 323,
          "description": "Key: Keypad 3"
        },
        {
          "name": "KEY_KP_4",
          "value": 324,
          "description": "Key: Keypad 4"
        },
        {
          "name": "KEY_KP_5",
          "value": 325,
          "description": "Key: Keypad 5"
        },
        {
          "name": "KEY_KP_6",
          "value": 326,
          "description": "Key: Keypad 6"
        },
        {
          "name": "KEY_KP_7",
          "value": 327,
          "description": "Key: Keypad 7"
        },
        {
          "name": "KEY_KP_8",
          "value": 328,
          "description": "Key: Keypad 8"
        },
        {
          "name": "KEY_KP_9",
          "value": 329,
          "description": "Key: Keypad 9"
        },
        {
          "name": "KEY_KP_DECIMAL",
          "value": 330,
          "description": "Key: Keypad ."
        },
        {
          "name": "KEY_KP_DIVIDE",
          "value": 331,
          "description": "Key: Keypad /"
        },
        {
          "name": "KEY_KP_MULTIPLY",
          "value": 332,
          "description": "Key: Keypad *"
        },
        {
          "name": "KEY_KP_SUBTRACT",
          "value": 333,
          "description": "Key: Keypad -"
        },
        {
          "name": "KEY_KP_ADD",
          "value": 334,
          "description": "Key: Keypad +"
        },
        {
          "name": "KEY_KP_ENTER",
          "value": 335,
          "description": "Key: Keypad Enter"
        },
        {
          "name": "KEY_KP_EQUAL",
          "value": 336,
          "description": "Key: Keypad ="
        },
        {
          "name": "KEY_BACK",
          "value": 4,
          "description": "Key: Android back button"
        },
        {
          "name": "KEY_VOLUME_UP",
          "value": 24,
          "description": "Key: Android volume up button"
        },
        {
          "name": "KEY_VOLUME_DOWN",
          "value": 25,
          "description": "Key: Android volume down button"
        }
      ],
      "description": "Keyboard keys (US keyboard layout)",
      "custom": true
    },
    {
      "name": "MouseButton",
      "values": [
        {
          "name": "MOUSE_BUTTON_LEFT",
          "value": 0,
          "description": "Mouse button left"
        },
        {
          "name": "MOUSE_BUTTON_RIGHT",
          "value": 1,
          "description": "Mouse button right"
        },
        {
          "name": "MOUSE_BUTTON_MIDDLE",
          "value": 2,
          "description": "Mouse button middle (pressed wheel)"
        },
        {
          "name": "MOUSE_BUTTON_SIDE",
          "value": 3,
          "description": "Mouse button side (advanced mouse device)"
        },
        {
          "name": "MOUSE_BUTTON_EXTRA",
          "value": 4,
          "description": "Mouse button extra (advanced mouse device)"
        },
        {
          "name": "MOUSE_BUTTON_FORWARD",
          "value": 5,
          "description": "Mouse button forward (advanced mouse device)"
        },
        {
          "name": "MOUSE_BUTTON_BACK",
          "value": 6,
          "description": "Mouse button back (advanced mouse device)"
        }
      ],
      "description": "Mouse buttons",
      "custom": false
    },
    {
      "name": "MouseCursor",
      "values": [
        {
          "name": "MOUSE_CURSOR_DEFAULT",
          "value": 0,
          "description": "Default pointer shape"
        },
        {
          "name": "MOUSE_CURSOR_ARROW",
          "value": 1,
          "description": "Arrow shape"
        },
        {
          "name": "MOUSE_CURSOR_IBEAM",
          "value": 2,
          "description": "Text writing cursor shape"
        },
        {
          "name": "MOUSE_CURSOR_CROSSHAIR",
          "value": 3,
          "description": "Cross shape"
        },
        {
          "name": "MOUSE_CURSOR_POINTING_HAND",
          "value": 4,
          "description": "Pointing hand cursor"
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_EW",
          "value": 5,
          "description": "Horizontal resize/move arrow shape"
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NS",
          "value": 6,
          "description": "Vertical resize/move arrow shape"
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NWSE",
          "value": 7,
          "description": "Top-left to bottom-right diagonal resize/move arrow shape"
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NESW",
          "value": 8,
          "description": "The top-right to bottom-left diagonal resize/move arrow shape"
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_ALL",
          "value": 9,
          "description": "The omnidirectional resize/move cursor shape"
        },
        {
          "name": "MOUSE_CURSOR_NOT_ALLOWED",
          "value": 10,
          "description": "The operation-not-allowed shape"
        }
      ],
      "description": "Mouse cursor",
      "custom": false
    },
    {
      "name": "GamepadButton",
      "values": [
        {
          "name": "GAMEPAD_BUTTON_UNKNOWN",
          "value": 0,
          "description": "Unknown button, just for error checking"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_UP",
          "value": 1,
          "description": "Gamepad left DPAD up button"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_RIGHT",
          "value": 2,
          "description": "Gamepad left DPAD right button"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_DOWN",
          "value": 3,
          "description": "Gamepad left DPAD down button"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_LEFT",
          "value": 4,
          "description": "Gamepad left DPAD left button"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_UP",
          "value": 5,
          "description": "Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT",
          "value": 6,
          "description": "Gamepad right button right (i.e. PS3: Square, Xbox: X)"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_DOWN",
          "value": 7,
          "description": "Gamepad right button down (i.e. PS3: Cross, Xbox: A)"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_LEFT",
          "value": 8,
          "description": "Gamepad right button left (i.e. PS3: Circle, Xbox: B)"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_1",
          "value": 9,
          "description": "Gamepad top/back trigger left (first), it could be a trailing button"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_2",
          "value": 10,
          "description": "Gamepad top/back trigger left (second), it could be a trailing button"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_1",
          "value": 11,
          "description": "Gamepad top/back trigger right (one), it could be a trailing button"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_2",
          "value": 12,
          "description": "Gamepad top/back trigger right (second), it could be a trailing button"
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE_LEFT",
          "value": 13,
          "description": "Gamepad center buttons, left one (i.e. PS3: Select)"
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE",
          "value": 14,
          "description": "Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)"
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE_RIGHT",
          "value": 15,
          "description": "Gamepad center buttons, right one (i.e. PS3: Start)"
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_THUMB",
          "value": 16,
          "description": "Gamepad joystick pressed button left"
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_THUMB",
          "value": 17,
          "description": "Gamepad joystick pressed button right"
        }
      ],
      "description": "Gamepad buttons",
      "custom": false
    },
    {
      "name": "GamepadAxis",
      "values": [
        {
          "name": "GAMEPAD_AXIS_LEFT_X",
          "value": 0,
          "description": "Gamepad left stick X axis"
        },
        {
          "name": "GAMEPAD_AXIS_LEFT_Y",
          "value": 1,
          "description": "Gamepad left stick Y axis"
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_X",
          "value": 2,
          "description": "Gamepad right stick X axis"
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_Y",
          "value": 3,
          "description": "Gamepad right stick Y axis"
        },
        {
          "name": "GAMEPAD_AXIS_LEFT_TRIGGER",
          "value": 4,
          "description": "Gamepad back trigger left, pressure level: [1..-1]"
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_TRIGGER",
          "value": 5,
          "description": "Gamepad back trigger right, pressure level: [1..-1]"
        }
      ],
      "description": "Gamepad axis",
      "custom": false
    },
    {
      "name": "MaterialMapIndex",
      "values": [
        {
          "name": "MATERIAL_MAP_ALBEDO",
          "value": 0,
          "description": "Albedo material (same as: MATERIAL_MAP_DIFFUSE)"
        },
        {
          "name": "MATERIAL_MAP_METALNESS",
          "value": 1,
          "description": "Metalness material (same as: MATERIAL_MAP_SPECULAR)"
        },
        {
          "name": "MATERIAL_MAP_NORMAL",
          "value": 2,
          "description": "Normal material"
        },
        {
          "name": "MATERIAL_MAP_ROUGHNESS",
          "value": 3,
          "description": "Roughness material"
        },
        {
          "name": "MATERIAL_MAP_OCCLUSION",
          "value": 4,
          "description": "Ambient occlusion material"
        },
        {
          "name": "MATERIAL_MAP_EMISSION",
          "value": 5,
          "description": "Emission material"
        },
        {
          "name": "MATERIAL_MAP_HEIGHT",
          "value": 6,
          "description": "Heightmap material"
        },
        {
          "name": "MATERIAL_MAP_CUBEMAP",
          "value": 7,
          "description": "Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)"
        },
        {
          "name": "MATERIAL_MAP_IRRADIANCE",
          "value": 8,
          "description": "Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)"
        },
        {
          "name": "MATERIAL_MAP_PREFILTER",
          "value": 9,
          "description": "Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)"
        },
        {
          "name": "MATERIAL_MAP_BRDF",
          "value": 10,
          "description": "Brdf material"
        }
      ],
      "description": "Material map index",
      "custom": false
    },
    {
      "name": "ShaderLocationIndex",
      "values": [
        {
          "name": "SHADER_LOC_VERTEX_POSITION",
          "value": 0,
          "description": "Shader location: vertex attribute: position"
        },
        {
          "name": "SHADER_LOC_VERTEX_TEXCOORD01",
          "value": 1,
          "description": "Shader location: vertex attribute: texcoord01"
        },
        {
          "name": "SHADER_LOC_VERTEX_TEXCOORD02",
          "value": 2,
          "description": "Shader location: vertex attribute: texcoord02"
        },
        {
          "name": "SHADER_LOC_VERTEX_NORMAL",
          "value": 3,
          "description": "Shader location: vertex attribute: normal"
        },
        {
          "name": "SHADER_LOC_VERTEX_TANGENT",
          "value": 4,
          "description": "Shader location: vertex attribute: tangent"
        },
        {
          "name": "SHADER_LOC_VERTEX_COLOR",
          "value": 5,
          "description": "Shader location: vertex attribute: color"
        },
        {
          "name": "SHADER_LOC_MATRIX_MVP",
          "value": 6,
          "description": "Shader location: matrix uniform: model-view-projection"
        },
        {
          "name": "SHADER_LOC_MATRIX_VIEW",
          "value": 7,
          "description": "Shader location: matrix uniform: view (camera transform)"
        },
        {
          "name": "SHADER_LOC_MATRIX_PROJECTION",
          "value": 8,
          "description": "Shader location: matrix uniform: projection"
        },
        {
          "name": "SHADER_LOC_MATRIX_MODEL",
          "value": 9,
          "description": "Shader location: matrix uniform: model (transform)"
        },
        {
          "name": "SHADER_LOC_MATRIX_NORMAL",
          "value": 10,
          "description": "Shader location: matrix uniform: normal"
        },
        {
          "name": "SHADER_LOC_VECTOR_VIEW",
          "value": 11,
          "description": "Shader location: vector uniform: view"
        },
        {
          "name": "SHADER_LOC_COLOR_DIFFUSE",
          "value": 12,
          "description": "Shader location: vector uniform: diffuse color"
        },
        {
          "name": "SHADER_LOC_COLOR_SPECULAR",
          "value": 13,
          "description": "Shader location: vector uniform: specular color"
        },
        {
          "name": "SHADER_LOC_COLOR_AMBIENT",
          "value": 14,
          "description": "Shader location: vector uniform: ambient color"
        },
        {
          "name": "SHADER_LOC_MAP_ALBEDO",
          "value": 15,
          "description": "Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)"
        },
        {
          "name": "SHADER_LOC_MAP_METALNESS",
          "value": 16,
          "description": "Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)"
        },
        {
          "name": "SHADER_LOC_MAP_NORMAL",
          "value": 17,
          "description": "Shader location: sampler2d texture: normal"
        },
        {
          "name": "SHADER_LOC_MAP_ROUGHNESS",
          "value": 18,
          "description": "Shader location: sampler2d texture: roughness"
        },
        {
          "name": "SHADER_LOC_MAP_OCCLUSION",
          "value": 19,
          "description": "Shader location: sampler2d texture: occlusion"
        },
        {
          "name": "SHADER_LOC_MAP_EMISSION",
          "value": 20,
          "description": "Shader location: sampler2d texture: emission"
        },
        {
          "name": "SHADER_LOC_MAP_HEIGHT",
          "value": 21,
          "description": "Shader location: sampler2d texture: height"
        },
        {
          "name": "SHADER_LOC_MAP_CUBEMAP",
          "value": 22,
          "description": "Shader location: samplerCube texture: cubemap"
        },
        {
          "name": "SHADER_LOC_MAP_IRRADIANCE",
          "value": 23,
          "description": "Shader location: samplerCube texture: irradiance"
        },
        {
          "name": "SHADER_LOC_MAP_PREFILTER",
          "value": 24,
          "description": "Shader location: samplerCube texture: prefilter"
        },
        {
          "name": "SHADER_LOC_MAP_BRDF",
          "value": 25,
          "description": "Shader location: sampler2d texture: brdf"
        }
      ],
      "description": "Shader location index",
      "custom": false
    },
    {
      "name": "ShaderUniformDataType",
      "values": [
        {
          "name": "SHADER_UNIFORM_FLOAT",
          "value": 0,
          "description": "Shader uniform type: float"
        },
        {
          "name": "SHADER_UNIFORM_VEC2",
          "value": 1,
          "description": "Shader uniform type: vec2 (2 float)"
        },
        {
          "name": "SHADER_UNIFORM_VEC3",
          "value": 2,
          "description": "Shader uniform type: vec3 (3 float)"
        },
        {
          "name": "SHADER_UNIFORM_VEC4",
          "value": 3,
          "description": "Shader uniform type: vec4 (4 float)"
        },
        {
          "name": "SHADER_UNIFORM_INT",
          "value": 4,
          "description": "Shader uniform type: int"
        },
        {
          "name": "SHADER_UNIFORM_IVEC2",
          "value": 5,
          "description": "Shader uniform type: ivec2 (2 int)"
        },
        {
          "name": "SHADER_UNIFORM_IVEC3",
          "value": 6,
          "description": "Shader uniform type: ivec3 (3 int)"
        },
        {
          "name": "SHADER_UNIFORM_IVEC4",
          "value": 7,
          "description": "Shader uniform type: ivec4 (4 int)"
        },
        {
          "name": "SHADER_UNIFORM_SAMPLER2D",
          "value": 8,
          "description": "Shader uniform type: sampler2d"
        }
      ],
      "description": "Shader uniform data type",
      "custom": false
    },
    {
      "name": "ShaderAttributeDataType",
      "values": [
        {
          "name": "SHADER_ATTRIB_FLOAT",
          "value": 0,
          "description": "Shader attribute type: float"
        },
        {
          "name": "SHADER_ATTRIB_VEC2",
          "value": 1,
          "description": "Shader attribute type: vec2 (2 float)"
        },
        {
          "name": "SHADER_ATTRIB_VEC3",
          "value": 2,
          "description": "Shader attribute type: vec3 (3 float)"
        },
        {
          "name": "SHADER_ATTRIB_VEC4",
          "value": 3,
          "description": "Shader attribute type: vec4 (4 float)"
        }
      ],
      "description": "Shader attribute data types",
      "custom": false
    },
    {
      "name": "PixelFormat",
      "values": [
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
          "value": 1,
          "description": "8 bit per pixel (no alpha)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
          "value": 2,
          "description": "8*2 bpp (2 channels)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R5G6B5",
          "value": 3,
          "description": "16 bpp"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8",
          "value": 4,
          "description": "24 bpp"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
          "value": 5,
          "description": "16 bpp (1 bit alpha)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
          "value": 6,
          "description": "16 bpp (4 bit alpha)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
          "value": 7,
          "description": "32 bpp"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32",
          "value": 8,
          "description": "32 bpp (1 channel - float)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32",
          "value": 9,
          "description": "32*3 bpp (3 channels - float)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
          "value": 10,
          "description": "32*4 bpp (4 channels - float)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R16",
          "value": 11,
          "description": "16 bpp (1 channel - half float)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R16G16B16",
          "value": 12,
          "description": "16*3 bpp (3 channels - half float)"
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R16G16B16A16",
          "value": 13,
          "description": "16*4 bpp (4 channels - half float)"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT1_RGB",
          "value": 14,
          "description": "4 bpp (no alpha)"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT1_RGBA",
          "value": 15,
          "description": "4 bpp (1 bit alpha)"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT3_RGBA",
          "value": 16,
          "description": "8 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT5_RGBA",
          "value": 17,
          "description": "8 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC1_RGB",
          "value": 18,
          "description": "4 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC2_RGB",
          "value": 19,
          "description": "4 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
          "value": 20,
          "description": "8 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_PVRT_RGB",
          "value": 21,
          "description": "4 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_PVRT_RGBA",
          "value": 22,
          "description": "4 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
          "value": 23,
          "description": "8 bpp"
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
          "value": 24,
          "description": "2 bpp"
        }
      ],
      "description": "Pixel formats",
      "custom": false
    },
    {
      "name": "TextureFilter",
      "values": [
        {
          "name": "TEXTURE_FILTER_POINT",
          "value": 0,
          "description": "No filter, just pixel approximation"
        },
        {
          "name": "TEXTURE_FILTER_BILINEAR",
          "value": 1,
          "description": "Linear filtering"
        },
        {
          "name": "TEXTURE_FILTER_TRILINEAR",
          "value": 2,
          "description": "Trilinear filtering (linear with mipmaps)"
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_4X",
          "value": 3,
          "description": "Anisotropic filtering 4x"
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_8X",
          "value": 4,
          "description": "Anisotropic filtering 8x"
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_16X",
          "value": 5,
          "description": "Anisotropic filtering 16x"
        }
      ],
      "description": "Texture parameters: filter mode",
      "custom": false
    },
    {
      "name": "TextureWrap",
      "values": [
        {
          "name": "TEXTURE_WRAP_REPEAT",
          "value": 0,
          "description": "Repeats texture in tiled mode"
        },
        {
          "name": "TEXTURE_WRAP_CLAMP",
          "value": 1,
          "description": "Clamps texture to edge pixel in tiled mode"
        },
        {
          "name": "TEXTURE_WRAP_MIRROR_REPEAT",
          "value": 2,
          "description": "Mirrors and repeats the texture in tiled mode"
        },
        {
          "name": "TEXTURE_WRAP_MIRROR_CLAMP",
          "value": 3,
          "description": "Mirrors and clamps to border the texture in tiled mode"
        }
      ],
      "description": "Texture parameters: wrap mode",
      "custom": false
    },
    {
      "name": "CubemapLayout",
      "values": [
        {
          "name": "CUBEMAP_LAYOUT_AUTO_DETECT",
          "value": 0,
          "description": "Automatically detect layout type"
        },
        {
          "name": "CUBEMAP_LAYOUT_LINE_VERTICAL",
          "value": 1,
          "description": "Layout is defined by a vertical line with faces"
        },
        {
          "name": "CUBEMAP_LAYOUT_LINE_HORIZONTAL",
          "value": 2,
          "description": "Layout is defined by a horizontal line with faces"
        },
        {
          "name": "CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR",
          "value": 3,
          "description": "Layout is defined by a 3x4 cross with cubemap faces"
        },
        {
          "name": "CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE",
          "value": 4,
          "description": "Layout is defined by a 4x3 cross with cubemap faces"
        },
        {
          "name": "CUBEMAP_LAYOUT_PANORAMA",
          "value": 5,
          "description": "Layout is defined by a panorama image (equirrectangular map)"
        }
      ],
      "description": "Cubemap layouts",
      "custom": false
    },
    {
      "name": "FontType",
      "values": [
        {
          "name": "FONT_DEFAULT",
          "value": 0,
          "description": "Default font generation, anti-aliased"
        },
        {
          "name": "FONT_BITMAP",
          "value": 1,
          "description": "Bitmap font generation, no anti-aliasing"
        },
        {
          "name": "FONT_SDF",
          "value": 2,
          "description": "SDF font generation, requires external shader"
        }
      ],
      "description": "Font type, defines generation method",
      "custom": false
    },
    {
      "name": "BlendMode",
      "values": [
        {
          "name": "BLEND_ALPHA",
          "value": 0,
          "description": "Blend textures considering alpha (default)"
        },
        {
          "name": "BLEND_ADDITIVE",
          "value": 1,
          "description": "Blend textures adding colors"
        },
        {
          "name": "BLEND_MULTIPLIED",
          "value": 2,
          "description": "Blend textures multiplying colors"
        },
        {
          "name": "BLEND_ADD_COLORS",
          "value": 3,
          "description": "Blend textures adding colors (alternative)"
        },
        {
          "name": "BLEND_SUBTRACT_COLORS",
          "value": 4,
          "description": "Blend textures subtracting colors (alternative)"
        },
        {
          "name": "BLEND_ALPHA_PREMULTIPLY",
          "value": 5,
          "description": "Blend premultiplied textures considering alpha"
        },
        {
          "name": "BLEND_CUSTOM",
          "value": 6,
          "description": "Blend textures using custom src/dst factors (use rlSetBlendFactors())"
        },
        {
          "name": "BLEND_CUSTOM_SEPARATE",
          "value": 7,
          "description": "Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())"
        }
      ],
      "description": "Color blending modes (pre-defined)",
      "custom": false
    },
    {
      "name": "Gesture",
      "values": [
        {
          "name": "GESTURE_NONE",
          "value": 0,
          "description": "No gesture"
        },
        {
          "name": "GESTURE_TAP",
          "value": 1,
          "description": "Tap gesture"
        },
        {
          "name": "GESTURE_DOUBLETAP",
          "value": 2,
          "description": "Double tap gesture"
        },
        {
          "name": "GESTURE_HOLD",
          "value": 4,
          "description": "Hold gesture"
        },
        {
          "name": "GESTURE_DRAG",
          "value": 8,
          "description": "Drag gesture"
        },
        {
          "name": "GESTURE_SWIPE_RIGHT",
          "value": 16,
          "description": "Swipe right gesture"
        },
        {
          "name": "GESTURE_SWIPE_LEFT",
          "value": 32,
          "description": "Swipe left gesture"
        },
        {
          "name": "GESTURE_SWIPE_UP",
          "value": 64,
          "description": "Swipe up gesture"
        },
        {
          "name": "GESTURE_SWIPE_DOWN",
          "value": 128,
          "description": "Swipe down gesture"
        },
        {
          "name": "GESTURE_PINCH_IN",
          "value": 256,
          "description": "Pinch in gesture"
        },
        {
          "name": "GESTURE_PINCH_OUT",
          "value": 512,
          "description": "Pinch out gesture"
        }
      ],
      "description": "Gesture",
      "custom": false
    },
    {
      "name": "CameraMode",
      "values": [
        {
          "name": "CAMERA_CUSTOM",
          "value": 0,
          "description": "Custom camera"
        },
        {
          "name": "CAMERA_FREE",
          "value": 1,
          "description": "Free camera"
        },
        {
          "name": "CAMERA_ORBITAL",
          "value": 2,
          "description": "Orbital camera"
        },
        {
          "name": "CAMERA_FIRST_PERSON",
          "value": 3,
          "description": "First person camera"
        },
        {
          "name": "CAMERA_THIRD_PERSON",
          "value": 4,
          "description": "Third person camera"
        }
      ],
      "description": "Camera system modes",
      "custom": false
    },
    {
      "name": "CameraProjection",
      "values": [
        {
          "name": "CAMERA_PERSPECTIVE",
          "value": 0,
          "description": "Perspective projection"
        },
        {
          "name": "CAMERA_ORTHOGRAPHIC",
          "value": 1,
          "description": "Orthographic projection"
        }
      ],
      "description": "Camera projection",
      "custom": false
    },
    {
      "name": "NPatchLayout",
      "values": [
        {
          "name": "NPATCH_NINE_PATCH",
          "value": 0,
          "description": "Npatch layout: 3x3 tiles"
        },
        {
          "name": "NPATCH_THREE_PATCH_VERTICAL",
          "value": 1,
          "description": "Npatch layout: 1x3 tiles"
        },
        {
          "name": "NPATCH_THREE_PATCH_HORIZONTAL",
          "value": 2,
          "description": "Npatch layout: 3x1 tiles"
        }
      ],
      "description": "N-patch layout",
      "custom": false
    },
    {
      "name": "rlGlVersion",
      "values": [
        {
          "name": "RL_OPENGL_11",
          "value": 1,
          "description": "OpenGL 1.1"
        },
        {
          "name": "RL_OPENGL_21",
          "value": 2,
          "description": "OpenGL 2.1 (GLSL 120)"
        },
        {
          "name": "RL_OPENGL_33",
          "value": 3,
          "description": "OpenGL 3.3 (GLSL 330)"
        },
        {
          "name": "RL_OPENGL_43",
          "value": 4,
          "description": "OpenGL 4.3 (using GLSL 330)"
        },
        {
          "name": "RL_OPENGL_ES_20",
          "value": 5,
          "description": "OpenGL ES 2.0 (GLSL 100)"
        },
        {
          "name": "RL_OPENGL_ES_30",
          "value": 6,
          "description": "OpenGL ES 3.0 (GLSL 300 es)"
        }
      ],
      "description": "OpenGL version",
      "custom": false
    },
    {
      "name": "rlTraceLogLevel",
      "values": [
        {
          "name": "RL_LOG_ALL",
          "value": 0,
          "description": "Display all logs"
        },
        {
          "name": "RL_LOG_TRACE",
          "value": 1,
          "description": "Trace logging, intended for internal use only"
        },
        {
          "name": "RL_LOG_DEBUG",
          "value": 2,
          "description": "Debug logging, used for internal debugging, it should be disabled on release builds"
        },
        {
          "name": "RL_LOG_INFO",
          "value": 3,
          "description": "Info logging, used for program execution info"
        },
        {
          "name": "RL_LOG_WARNING",
          "value": 4,
          "description": "Warning logging, used on recoverable failures"
        },
        {
          "name": "RL_LOG_ERROR",
          "value": 5,
          "description": "Error logging, used on unrecoverable failures"
        },
        {
          "name": "RL_LOG_FATAL",
          "value": 6,
          "description": "Fatal logging, used to abort program: exit(EXIT_FAILURE)"
        },
        {
          "name": "RL_LOG_NONE",
          "value": 7,
          "description": "Disable logging"
        }
      ],
      "description": "Trace log level",
      "custom": false
    },
    {
      "name": "rlPixelFormat",
      "values": [
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
          "value": 1,
          "description": "8 bit per pixel (no alpha)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
          "value": 2,
          "description": "8*2 bpp (2 channels)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5",
          "value": 3,
          "description": "16 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8",
          "value": 4,
          "description": "24 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
          "value": 5,
          "description": "16 bpp (1 bit alpha)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
          "value": 6,
          "description": "16 bpp (4 bit alpha)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
          "value": 7,
          "description": "32 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32",
          "value": 8,
          "description": "32 bpp (1 channel - float)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32",
          "value": 9,
          "description": "32*3 bpp (3 channels - float)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
          "value": 10,
          "description": "32*4 bpp (4 channels - float)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R16",
          "value": 11,
          "description": "16 bpp (1 channel - half float)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16",
          "value": 12,
          "description": "16*3 bpp (3 channels - half float)"
        },
        {
          "name": "RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16",
          "value": 13,
          "description": "16*4 bpp (4 channels - half float)"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGB",
          "value": 14,
          "description": "4 bpp (no alpha)"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA",
          "value": 15,
          "description": "4 bpp (1 bit alpha)"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA",
          "value": 16,
          "description": "8 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA",
          "value": 17,
          "description": "8 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_ETC1_RGB",
          "value": 18,
          "description": "4 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_RGB",
          "value": 19,
          "description": "4 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
          "value": 20,
          "description": "8 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGB",
          "value": 21,
          "description": "4 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA",
          "value": 22,
          "description": "4 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
          "value": 23,
          "description": "8 bpp"
        },
        {
          "name": "RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
          "value": 24,
          "description": "2 bpp"
        }
      ],
      "description": "Texture pixel formats",
      "custom": false
    },
    {
      "name": "rlTextureFilter",
      "values": [
        {
          "name": "RL_TEXTURE_FILTER_POINT",
          "value": 0,
          "description": "No filter, just pixel approximation"
        },
        {
          "name": "RL_TEXTURE_FILTER_BILINEAR",
          "value": 1,
          "description": "Linear filtering"
        },
        {
          "name": "RL_TEXTURE_FILTER_TRILINEAR",
          "value": 2,
          "description": "Trilinear filtering (linear with mipmaps)"
        },
        {
          "name": "RL_TEXTURE_FILTER_ANISOTROPIC_4X",
          "value": 3,
          "description": "Anisotropic filtering 4x"
        },
        {
          "name": "RL_TEXTURE_FILTER_ANISOTROPIC_8X",
          "value": 4,
          "description": "Anisotropic filtering 8x"
        },
        {
          "name": "RL_TEXTURE_FILTER_ANISOTROPIC_16X",
          "value": 5,
          "description": "Anisotropic filtering 16x"
        }
      ],
      "description": "Texture parameters: filter mode",
      "custom": false
    },
    {
      "name": "rlBlendMode",
      "values": [
        {
          "name": "RL_BLEND_ALPHA",
          "value": 0,
          "description": "Blend textures considering alpha (default)"
        },
        {
          "name": "RL_BLEND_ADDITIVE",
          "value": 1,
          "description": "Blend textures adding colors"
        },
        {
          "name": "RL_BLEND_MULTIPLIED",
          "value": 2,
          "description": "Blend textures multiplying colors"
        },
        {
          "name": "RL_BLEND_ADD_COLORS",
          "value": 3,
          "description": "Blend textures adding colors (alternative)"
        },
        {
          "name": "RL_BLEND_SUBTRACT_COLORS",
          "value": 4,
          "description": "Blend textures subtracting colors (alternative)"
        },
        {
          "name": "RL_BLEND_ALPHA_PREMULTIPLY",
          "value": 5,
          "description": "Blend premultiplied textures considering alpha"
        },
        {
          "name": "RL_BLEND_CUSTOM",
          "value": 6,
          "description": "Blend textures using custom src/dst factors (use rlSetBlendFactors())"
        },
        {
          "name": "RL_BLEND_CUSTOM_SEPARATE",
          "value": 7,
          "description": "Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())"
        }
      ],
      "description": "Color blending modes (pre-defined)",
      "custom": false
    },
    {
      "name": "rlShaderLocationIndex",
      "values": [
        {
          "name": "RL_SHADER_LOC_VERTEX_POSITION",
          "value": 0,
          "description": "Shader location: vertex attribute: position"
        },
        {
          "name": "RL_SHADER_LOC_VERTEX_TEXCOORD01",
          "value": 1,
          "description": "Shader location: vertex attribute: texcoord01"
        },
        {
          "name": "RL_SHADER_LOC_VERTEX_TEXCOORD02",
          "value": 2,
          "description": "Shader location: vertex attribute: texcoord02"
        },
        {
          "name": "RL_SHADER_LOC_VERTEX_NORMAL",
          "value": 3,
          "description": "Shader location: vertex attribute: normal"
        },
        {
          "name": "RL_SHADER_LOC_VERTEX_TANGENT",
          "value": 4,
          "description": "Shader location: vertex attribute: tangent"
        },
        {
          "name": "RL_SHADER_LOC_VERTEX_COLOR",
          "value": 5,
          "description": "Shader location: vertex attribute: color"
        },
        {
          "name": "RL_SHADER_LOC_MATRIX_MVP",
          "value": 6,
          "description": "Shader location: matrix uniform: model-view-projection"
        },
        {
          "name": "RL_SHADER_LOC_MATRIX_VIEW",
          "value": 7,
          "description": "Shader location: matrix uniform: view (camera transform)"
        },
        {
          "name": "RL_SHADER_LOC_MATRIX_PROJECTION",
          "value": 8,
          "description": "Shader location: matrix uniform: projection"
        },
        {
          "name": "RL_SHADER_LOC_MATRIX_MODEL",
          "value": 9,
          "description": "Shader location: matrix uniform: model (transform)"
        },
        {
          "name": "RL_SHADER_LOC_MATRIX_NORMAL",
          "value": 10,
          "description": "Shader location: matrix uniform: normal"
        },
        {
          "name": "RL_SHADER_LOC_VECTOR_VIEW",
          "value": 11,
          "description": "Shader location: vector uniform: view"
        },
        {
          "name": "RL_SHADER_LOC_COLOR_DIFFUSE",
          "value": 12,
          "description": "Shader location: vector uniform: diffuse color"
        },
        {
          "name": "RL_SHADER_LOC_COLOR_SPECULAR",
          "value": 13,
          "description": "Shader location: vector uniform: specular color"
        },
        {
          "name": "RL_SHADER_LOC_COLOR_AMBIENT",
          "value": 14,
          "description": "Shader location: vector uniform: ambient color"
        },
        {
          "name": "RL_SHADER_LOC_MAP_ALBEDO",
          "value": 15,
          "description": "Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)"
        },
        {
          "name": "RL_SHADER_LOC_MAP_METALNESS",
          "value": 16,
          "description": "Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)"
        },
        {
          "name": "RL_SHADER_LOC_MAP_NORMAL",
          "value": 17,
          "description": "Shader location: sampler2d texture: normal"
        },
        {
          "name": "RL_SHADER_LOC_MAP_ROUGHNESS",
          "value": 18,
          "description": "Shader location: sampler2d texture: roughness"
        },
        {
          "name": "RL_SHADER_LOC_MAP_OCCLUSION",
          "value": 19,
          "description": "Shader location: sampler2d texture: occlusion"
        },
        {
          "name": "RL_SHADER_LOC_MAP_EMISSION",
          "value": 20,
          "description": "Shader location: sampler2d texture: emission"
        },
        {
          "name": "RL_SHADER_LOC_MAP_HEIGHT",
          "value": 21,
          "description": "Shader location: sampler2d texture: height"
        },
        {
          "name": "RL_SHADER_LOC_MAP_CUBEMAP",
          "value": 22,
          "description": "Shader location: samplerCube texture: cubemap"
        },
        {
          "name": "RL_SHADER_LOC_MAP_IRRADIANCE",
          "value": 23,
          "description": "Shader location: samplerCube texture: irradiance"
        },
        {
          "name": "RL_SHADER_LOC_MAP_PREFILTER",
          "value": 24,
          "description": "Shader location: samplerCube texture: prefilter"
        },
        {
          "name": "RL_SHADER_LOC_MAP_BRDF",
          "value": 25,
          "description": "Shader location: sampler2d texture: brdf"
        }
      ],
      "description": "Shader location point type",
      "custom": false
    },
    {
      "name": "rlShaderUniformDataType",
      "values": [
        {
          "name": "RL_SHADER_UNIFORM_FLOAT",
          "value": 0,
          "description": "Shader uniform type: float"
        },
        {
          "name": "RL_SHADER_UNIFORM_VEC2",
          "value": 1,
          "description": "Shader uniform type: vec2 (2 float)"
        },
        {
          "name": "RL_SHADER_UNIFORM_VEC3",
          "value": 2,
          "description": "Shader uniform type: vec3 (3 float)"
        },
        {
          "name": "RL_SHADER_UNIFORM_VEC4",
          "value": 3,
          "description": "Shader uniform type: vec4 (4 float)"
        },
        {
          "name": "RL_SHADER_UNIFORM_INT",
          "value": 4,
          "description": "Shader uniform type: int"
        },
        {
          "name": "RL_SHADER_UNIFORM_IVEC2",
          "value": 5,
          "description": "Shader uniform type: ivec2 (2 int)"
        },
        {
          "name": "RL_SHADER_UNIFORM_IVEC3",
          "value": 6,
          "description": "Shader uniform type: ivec3 (3 int)"
        },
        {
          "name": "RL_SHADER_UNIFORM_IVEC4",
          "value": 7,
          "description": "Shader uniform type: ivec4 (4 int)"
        },
        {
          "name": "RL_SHADER_UNIFORM_SAMPLER2D",
          "value": 8,
          "description": "Shader uniform type: sampler2d"
        }
      ],
      "description": "Shader uniform data type",
      "custom": false
    },
    {
      "name": "rlShaderAttributeDataType",
      "values": [
        {
          "name": "RL_SHADER_ATTRIB_FLOAT",
          "value": 0,
          "description": "Shader attribute type: float"
        },
        {
          "name": "RL_SHADER_ATTRIB_VEC2",
          "value": 1,
          "description": "Shader attribute type: vec2 (2 float)"
        },
        {
          "name": "RL_SHADER_ATTRIB_VEC3",
          "value": 2,
          "description": "Shader attribute type: vec3 (3 float)"
        },
        {
          "name": "RL_SHADER_ATTRIB_VEC4",
          "value": 3,
          "description": "Shader attribute type: vec4 (4 float)"
        }
      ],
      "description": "Shader attribute data types",
      "custom": false
    },
    {
      "name": "rlFramebufferAttachType",
      "values": [
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL0",
          "value": 0,
          "description": "Framebuffer attachment type: color 0"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL1",
          "value": 1,
          "description": "Framebuffer attachment type: color 1"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL2",
          "value": 2,
          "description": "Framebuffer attachment type: color 2"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL3",
          "value": 3,
          "description": "Framebuffer attachment type: color 3"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL4",
          "value": 4,
          "description": "Framebuffer attachment type: color 4"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL5",
          "value": 5,
          "description": "Framebuffer attachment type: color 5"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL6",
          "value": 6,
          "description": "Framebuffer attachment type: color 6"
        },
        {
          "name": "RL_ATTACHMENT_COLOR_CHANNEL7",
          "value": 7,
          "description": "Framebuffer attachment type: color 7"
        },
        {
          "name": "RL_ATTACHMENT_DEPTH",
          "value": 100,
          "description": "Framebuffer attachment type: depth"
        },
        {
          "name": "RL_ATTACHMENT_STENCIL",
          "value": 200,
          "description": "Framebuffer attachment type: stencil"
        }
      ],
      "description": "Framebuffer attachment type",
      "custom": false
    },
    {
      "name": "rlFramebufferAttachTextureType",
      "values": [
        {
          "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_X",
          "value": 0,
          "description": "Framebuffer texture attachment type: cubemap, +X side"
        },
        {
          "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_X",
          "value": 1,
          "description": "Framebuffer texture attachment type: cubemap, -X side"
        },
        {
          "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Y",
          "value": 2,
          "description": "Framebuffer texture attachment type: cubemap, +Y side"
        },
        {
          "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y",
          "value": 3,
          "description": "Framebuffer texture attachment type: cubemap, -Y side"
        },
        {
          "name": "RL_ATTACHMENT_CUBEMAP_POSITIVE_Z",
          "value": 4,
          "description": "Framebuffer texture attachment type: cubemap, +Z side"
        },
        {
          "name": "RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z",
          "value": 5,
          "description": "Framebuffer texture attachment type: cubemap, -Z side"
        },
        {
          "name": "RL_ATTACHMENT_TEXTURE2D",
          "value": 100,
          "description": "Framebuffer texture attachment type: texture2d"
        },
        {
          "name": "RL_ATTACHMENT_RENDERBUFFER",
          "value": 200,
          "description": "Framebuffer texture attachment type: renderbuffer"
        }
      ],
      "description": "Framebuffer texture attachment type",
      "custom": false
    },
    {
      "name": "rlCullMode",
      "values": [
        {
          "name": "RL_CULL_FACE_FRONT",
          "value": 0,
          "description": ""
        },
        {
          "name": "RL_CULL_FACE_BACK",
          "value": 1,
          "description": ""
        }
      ],
      "description": "Face culling mode",
      "custom": false
    },
    {
      "name": "PhysicsShapeType",
      "values": [
        {
          "name": "PHYSICS_CIRCLE",
          "value": 0,
          "description": "physics shape is a circle"
        },
        {
          "name": "PHYSICS_POLYGON",
          "value": 1,
          "description": "physics shape is a polygon"
        }
      ],
      "description": "circle or polygon",
      "custom": true
    }
  ],
  "structs": [
    {
      "name": "Vector2",
      "fields": [
        {
          "name": "x",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "y",
          "typ": "f32",
          "description": ""
        }
      ],
      "description": "Vector2 type",
      "custom": false
    },
    {
      "name": "Vector3",
      "fields": [
        {
          "name": "x",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "y",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "z",
          "typ": "f32",
          "description": ""
        }
      ],
      "description": "Vector3 type",
      "custom": false
    },
    {
      "name": "Vector4",
      "fields": [
        {
          "name": "x",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "y",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "z",
          "typ": "f32",
          "description": ""
        },
        {
          "name": "w",
          "typ": "f32",
          "description": ""
        }
      ],
      "description": "Vector4 type",
      "custom": false
    },
    {
      "name": "Matrix",
      "fields": [
        {
          "name": "m0",
          "typ": "f32",
          "description": "Matrix first row (4 components)"
        },
        {
          "name": "m4",
          "typ": "f32",
          "description": "Matrix first row (4 components)"
        },
        {
          "name": "m8",
          "typ": "f32",
          "description": "Matrix first row (4 components)"
        },
        {
          "name": "m12",
          "typ": "f32",
          "description": "Matrix first row (4 components)"
        },
        {
          "name": "m1",
          "typ": "f32",
          "description": "Matrix second row (4 components)"
        },
        {
          "name": "m5",
          "typ": "f32",
          "description": "Matrix second row (4 components)"
        },
        {
          "name": "m9",
          "typ": "f32",
          "description": "Matrix second row (4 components)"
        },
        {
          "name": "m13",
          "typ": "f32",
          "description": "Matrix second row (4 components)"
        },
        {
          "name": "m2",
          "typ": "f32",
          "description": "Matrix third row (4 components)"
        },
        {
          "name": "m6",
          "typ": "f32",
          "description": "Matrix third row (4 components)"
        },
        {
          "name": "m10",
          "typ": "f32",
          "description": "Matrix third row (4 components)"
        },
        {
          "name": "m14",
          "typ": "f32",
          "description": "Matrix third row (4 components)"
        },
        {
          "name": "m3",
          "typ": "f32",
          "description": "Matrix fourth row (4 components)"
        },
        {
          "name": "m7",
          "typ": "f32",
          "description": "Matrix fourth row (4 components)"
        },
        {
          "name": "m11",
          "typ": "f32",
          "description": "Matrix fourth row (4 components)"
        },
        {
          "name": "m15",
          "typ": "f32",
          "description": "Matrix fourth row (4 components)"
        }
      ],
      "description": "Matrix type (OpenGL style 4x4 - right handed, column major)",
      "custom": false
    },
    {
      "name": "Color",
      "fields": [
        {
          "name": "r",
          "typ": "u8",
          "description": "Color red value"
        },
        {
          "name": "g",
          "typ": "u8",
          "description": "Color green value"
        },
        {
          "name": "b",
          "typ": "u8",
          "description": "Color blue value"
        },
        {
          "name": "a",
          "typ": "u8",
          "description": "Color alpha value"
        }
      ],
      "description": "Color, 4 components, R8G8B8A8 (32bit)",
      "custom": false
    },
    {
      "name": "Rectangle",
      "fields": [
        {
          "name": "x",
          "typ": "f32",
          "description": "Rectangle top-left corner position x"
        },
        {
          "name": "y",
          "typ": "f32",
          "description": "Rectangle top-left corner position y"
        },
        {
          "name": "width",
          "typ": "f32",
          "description": "Rectangle width"
        },
        {
          "name": "height",
          "typ": "f32",
          "description": "Rectangle height"
        }
      ],
      "description": "Rectangle, 4 components",
      "custom": false
    },
    {
      "name": "Image",
      "fields": [
        {
          "name": "data",
          "typ": "*anyopaque",
          "description": "Image raw data"
        },
        {
          "name": "width",
          "typ": "i32",
          "description": "Image base width"
        },
        {
          "name": "height",
          "typ": "i32",
          "description": "Image base height"
        },
        {
          "name": "mipmaps",
          "typ": "i32",
          "description": "Mipmap levels, 1 by default"
        },
        {
          "name": "format",
          "typ": "i32",
          "description": "Data format (PixelFormat type)"
        }
      ],
      "description": "Image, pixel data stored in CPU memory (RAM)",
      "custom": false
    },
    {
      "name": "Texture2D",
      "fields": [
        {
          "name": "id",
          "typ": "u32",
          "description": "OpenGL texture id"
        },
        {
          "name": "width",
          "typ": "i32",
          "description": "Texture base width"
        },
        {
          "name": "height",
          "typ": "i32",
          "description": "Texture base height"
        },
        {
          "name": "mipmaps",
          "typ": "i32",
          "description": "Mipmap levels, 1 by default"
        },
        {
          "name": "format",
          "typ": "i32",
          "description": "Data format (PixelFormat type)"
        }
      ],
      "description": "Texture, tex data stored in GPU memory (VRAM)",
      "custom": false
    },
    {
      "name": "RenderTexture2D",
      "fields": [
        {
          "name": "id",
          "typ": "u32",
          "description": "OpenGL framebuffer object id"
        },
        {
          "name": "texture",
          "typ": "Texture2D",
          "description": "Color buffer attachment texture"
        },
        {
          "name": "depth",
          "typ": "Texture2D",
          "description": "Depth buffer attachment texture"
        }
      ],
      "description": "RenderTexture, fbo for texture rendering",
      "custom": false
    },
    {
      "name": "NPatchInfo",
      "fields": [
        {
          "name": "source",
          "typ": "Rectangle",
          "description": "Texture source rectangle"
        },
        {
          "name": "left",
          "typ": "i32",
          "description": "Left border offset"
        },
        {
          "name": "top",
          "typ": "i32",
          "description": "Top border offset"
        },
        {
          "name": "right",
          "typ": "i32",
          "description": "Right border offset"
        },
        {
          "name": "bottom",
          "typ": "i32",
          "description": "Bottom border offset"
        },
        {
          "name": "layout",
          "typ": "i32",
          "description": "Layout of the n-patch: 3x3, 1x3 or 3x1"
        }
      ],
      "description": "NPatchInfo, n-patch layout info",
      "custom": false
    },
    {
      "name": "GlyphInfo",
      "fields": [
        {
          "name": "value",
          "typ": "i32",
          "description": "Character value (Unicode)"
        },
        {
          "name": "offsetX",
          "typ": "i32",
          "description": "Character offset X when drawing"
        },
        {
          "name": "offsetY",
          "typ": "i32",
          "description": "Character offset Y when drawing"
        },
        {
          "name": "advanceX",
          "typ": "i32",
          "description": "Character advance position X"
        },
        {
          "name": "image",
          "typ": "Image",
          "description": "Character image data"
        }
      ],
      "description": "GlyphInfo, font characters glyphs info",
      "custom": false
    },
    {
      "name": "Font",
      "fields": [
        {
          "name": "baseSize",
          "typ": "i32",
          "description": "Base size (default chars height)"
        },
        {
          "name": "glyphCount",
          "typ": "i32",
          "description": "Number of glyph characters"
        },
        {
          "name": "glyphPadding",
          "typ": "i32",
          "description": "Padding around the glyph characters"
        },
        {
          "name": "texture",
          "typ": "Texture2D",
          "description": "Texture atlas containing the glyphs"
        },
        {
          "name": "recs",
          "typ": "?[*]Rectangle",
          "description": "Rectangles in texture for the glyphs"
        },
        {
          "name": "glyphs",
          "typ": "?[*]GlyphInfo",
          "description": "Glyphs info data"
        }
      ],
      "description": "Font, font texture and GlyphInfo array data",
      "custom": false
    },
    {
      "name": "Camera3D",
      "fields": [
        {
          "name": "position",
          "typ": "Vector3",
          "description": "Camera position"
        },
        {
          "name": "target",
          "typ": "Vector3",
          "description": "Camera target it looks-at"
        },
        {
          "name": "up",
          "typ": "Vector3",
          "description": "Camera up vector (rotation over its axis)"
        },
        {
          "name": "fovy",
          "typ": "f32",
          "description": "Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic"
        },
        {
          "name": "projection",
          "typ": "CameraProjection",
          "description": "Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC"
        }
      ],
      "description": "Camera, defines position/orientation in 3d space",
      "custom": true
    },
    {
      "name": "Camera2D",
      "fields": [
        {
          "name": "offset",
          "typ": "Vector2",
          "description": "Camera offset (displacement from target)"
        },
        {
          "name": "target",
          "typ": "Vector2",
          "description": "Camera target (rotation and zoom origin)"
        },
        {
          "name": "rotation",
          "typ": "f32",
          "description": "Camera rotation in degrees"
        },
        {
          "name": "zoom",
          "typ": "f32",
          "description": "Camera zoom (scaling), should be 1.0f by default"
        }
      ],
      "description": "Camera2D, defines position/orientation in 2d space",
      "custom": false
    },
    {
      "name": "Mesh",
      "fields": [
        {
          "name": "vertexCount",
          "typ": "i32",
          "description": "Number of vertices stored in arrays"
        },
        {
          "name": "triangleCount",
          "typ": "i32",
          "description": "Number of triangles stored (indexed or not)"
        },
        {
          "name": "vertices",
          "typ": "?[*]f32",
          "description": "Vertex position (XYZ - 3 components per vertex) (shader-location = 0)"
        },
        {
          "name": "texcoords",
          "typ": "?[*]f32",
          "description": "Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)"
        },
        {
          "name": "texcoords2",
          "typ": "?[*]f32",
          "description": "Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)"
        },
        {
          "name": "normals",
          "typ": "?[*]f32",
          "description": "Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)"
        },
        {
          "name": "tangents",
          "typ": "?[*]f32",
          "description": "Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)"
        },
        {
          "name": "colors",
          "typ": "?[*]u8",
          "description": "Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)"
        },
        {
          "name": "indices",
          "typ": "?[*]u16",
          "description": "Vertex indices (in case vertex data comes indexed)"
        },
        {
          "name": "animVertices",
          "typ": "?[*]f32",
          "description": "Animated vertex positions (after bones transformations)"
        },
        {
          "name": "animNormals",
          "typ": "?[*]f32",
          "description": "Animated normals (after bones transformations)"
        },
        {
          "name": "boneIds",
          "typ": "?[*]u8",
          "description": "Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)"
        },
        {
          "name": "boneWeights",
          "typ": "?[*]f32",
          "description": "Vertex bone weight, up to 4 bones influence by vertex (skinning)"
        },
        {
          "name": "vaoId",
          "typ": "u32",
          "description": "OpenGL Vertex Array Object id"
        },
        {
          "name": "vboId",
          "typ": "?[*]u32",
          "description": "OpenGL Vertex Buffer Objects id (default vertex data)"
        }
      ],
      "description": "Mesh, vertex data and vao/vbo",
      "custom": false
    },
    {
      "name": "Shader",
      "fields": [
        {
          "name": "id",
          "typ": "u32",
          "description": "Shader program id"
        },
        {
          "name": "locs",
          "typ": "?[*]i32",
          "description": "Shader locations array (RL_MAX_SHADER_LOCATIONS)"
        }
      ],
      "description": "Shader",
      "custom": false
    },
    {
      "name": "MaterialMap",
      "fields": [
        {
          "name": "texture",
          "typ": "Texture2D",
          "description": "Material map texture"
        },
        {
          "name": "color",
          "typ": "Color",
          "description": "Material map color"
        },
        {
          "name": "value",
          "typ": "f32",
          "description": "Material map value"
        }
      ],
      "description": "MaterialMap",
      "custom": false
    },
    {
      "name": "Material",
      "fields": [
        {
          "name": "shader",
          "typ": "Shader",
          "description": "Material shader"
        },
        {
          "name": "maps",
          "typ": "?[*]MaterialMap",
          "description": "Material maps array (MAX_MATERIAL_MAPS)"
        },
        {
          "name": "params",
          "typ": "[4]f32",
          "description": "Material generic parameters (if required)"
        }
      ],
      "description": "Material, includes shader and maps",
      "custom": false
    },
    {
      "name": "Transform",
      "fields": [
        {
          "name": "translation",
          "typ": "Vector3",
          "description": "Translation"
        },
        {
          "name": "rotation",
          "typ": "Vector4",
          "description": "Rotation"
        },
        {
          "name": "scale",
          "typ": "Vector3",
          "description": "Scale"
        }
      ],
      "description": "Transform, vertex transformation data",
      "custom": false
    },
    {
      "name": "BoneInfo",
      "fields": [
        {
          "name": "name",
          "typ": "[32]u8",
          "description": "Bone name"
        },
        {
          "name": "parent",
          "typ": "i32",
          "description": "Bone parent"
        }
      ],
      "description": "Bone, skeletal animation bone",
      "custom": false
    },
    {
      "name": "Model",
      "fields": [
        {
          "name": "transform",
          "typ": "Matrix",
          "description": "Local transform matrix"
        },
        {
          "name": "meshCount",
          "typ": "i32",
          "description": "Number of meshes"
        },
        {
          "name": "materialCount",
          "typ": "i32",
          "description": "Number of materials"
        },
        {
          "name": "meshes",
          "typ": "?[*]Mesh",
          "description": "Meshes array"
        },
        {
          "name": "materials",
          "typ": "?[*]Material",
          "description": "Materials array"
        },
        {
          "name": "meshMaterial",
          "typ": "?[*]i32",
          "description": "Mesh material number"
        },
        {
          "name": "boneCount",
          "typ": "i32",
          "description": "Number of bones"
        },
        {
          "name": "bones",
          "typ": "?[*]BoneInfo",
          "description": "Bones information (skeleton)"
        },
        {
          "name": "bindPose",
          "typ": "?[*]Transform",
          "description": "Bones base transformation (pose)"
        }
      ],
      "description": "Model, meshes, materials and animation data",
      "custom": false
    },
    {
      "name": "ModelAnimation",
      "fields": [
        {
          "name": "boneCount",
          "typ": "i32",
          "description": "Number of bones"
        },
        {
          "name": "frameCount",
          "typ": "i32",
          "description": "Number of animation frames"
        },
        {
          "name": "bones",
          "typ": "?[*]BoneInfo",
          "description": "Bones information (skeleton)"
        },
        {
          "name": "framePoses",
          "typ": "?[*][*]Transform",
          "description": "Poses array by frame"
        },
        {
          "name": "name",
          "typ": "[32]u8",
          "description": "Animation name"
        }
      ],
      "description": "ModelAnimation",
      "custom": true
    },
    {
      "name": "Ray",
      "fields": [
        {
          "name": "position",
          "typ": "Vector3",
          "description": "Ray position (origin)"
        },
        {
          "name": "direction",
          "typ": "Vector3",
          "description": "Ray direction"
        }
      ],
      "description": "Ray, ray for raycasting",
      "custom": false
    },
    {
      "name": "RayCollision",
      "fields": [
        {
          "name": "hit",
          "typ": "bool",
          "description": "Did the ray hit something?"
        },
        {
          "name": "distance",
          "typ": "f32",
          "description": "Distance to the nearest hit"
        },
        {
          "name": "point",
          "typ": "Vector3",
          "description": "Point of the nearest hit"
        },
        {
          "name": "normal",
          "typ": "Vector3",
          "description": "Surface normal of hit"
        }
      ],
      "description": "RayCollision, ray hit information",
      "custom": false
    },
    {
      "name": "BoundingBox",
      "fields": [
        {
          "name": "min",
          "typ": "Vector3",
          "description": "Minimum vertex box-corner"
        },
        {
          "name": "max",
          "typ": "Vector3",
          "description": "Maximum vertex box-corner"
        }
      ],
      "description": "BoundingBox",
      "custom": false
    },
    {
      "name": "Wave",
      "fields": [
        {
          "name": "frameCount",
          "typ": "u32",
          "description": "Total number of frames (considering channels)"
        },
        {
          "name": "sampleRate",
          "typ": "u32",
          "description": "Frequency (samples per second)"
        },
        {
          "name": "sampleSize",
          "typ": "u32",
          "description": "Bit depth (bits per sample): 8, 16, 32 (24 not supported)"
        },
        {
          "name": "channels",
          "typ": "u32",
          "description": "Number of channels (1-mono, 2-stereo, ...)"
        },
        {
          "name": "data",
          "typ": "*anyopaque",
          "description": "Buffer data pointer"
        }
      ],
      "description": "Wave, audio wave data",
      "custom": false
    },
    {
      "name": "AudioStream",
      "fields": [
        {
          "name": "buffer",
          "typ": "*anyopaque",
          "description": "Pointer to internal data used by the audio system"
        },
        {
          "name": "processor",
          "typ": "*anyopaque",
          "description": "Pointer to internal data processor, useful for audio effects"
        },
        {
          "name": "sampleRate",
          "typ": "u32",
          "description": "Frequency (samples per second)"
        },
        {
          "name": "sampleSize",
          "typ": "u32",
          "description": "Bit depth (bits per sample): 8, 16, 32 (24 not supported)"
        },
        {
          "name": "channels",
          "typ": "u32",
          "description": "Number of channels (1-mono, 2-stereo, ...)"
        }
      ],
      "description": "AudioStream, custom audio stream",
      "custom": false
    },
    {
      "name": "Sound",
      "fields": [
        {
          "name": "stream",
          "typ": "AudioStream",
          "description": "Audio stream"
        },
        {
          "name": "frameCount",
          "typ": "u32",
          "description": "Total number of frames (considering channels)"
        }
      ],
      "description": "Sound",
      "custom": false
    },
    {
      "name": "Music",
      "fields": [
        {
          "name": "stream",
          "typ": "AudioStream",
          "description": "Audio stream"
        },
        {
          "name": "frameCount",
          "typ": "u32",
          "description": "Total number of frames (considering channels)"
        },
        {
          "name": "looping",
          "typ": "bool",
          "description": "Music looping enable"
        },
        {
          "name": "ctxType",
          "typ": "i32",
          "description": "Type of music context (audio filetype)"
        },
        {
          "name": "ctxData",
          "typ": "*anyopaque",
          "description": "Audio context data, depends on type"
        }
      ],
      "description": "Music, audio stream, anything longer than ~10 seconds should be streamed",
      "custom": false
    },
    {
      "name": "VrDeviceInfo",
      "fields": [
        {
          "name": "hResolution",
          "typ": "i32",
          "description": "Horizontal resolution in pixels"
        },
        {
          "name": "vResolution",
          "typ": "i32",
          "description": "Vertical resolution in pixels"
        },
        {
          "name": "hScreenSize",
          "typ": "f32",
          "description": "Horizontal size in meters"
        },
        {
          "name": "vScreenSize",
          "typ": "f32",
          "description": "Vertical size in meters"
        },
        {
          "name": "vScreenCenter",
          "typ": "f32",
          "description": "Screen center in meters"
        },
        {
          "name": "eyeToScreenDistance",
          "typ": "f32",
          "description": "Distance between eye and display in meters"
        },
        {
          "name": "lensSeparationDistance",
          "typ": "f32",
          "description": "Lens separation distance in meters"
        },
        {
          "name": "interpupillaryDistance",
          "typ": "f32",
          "description": "IPD (distance between pupils) in meters"
        },
        {
          "name": "lensDistortionValues",
          "typ": "[4]f32",
          "description": "Lens distortion constant parameters"
        },
        {
          "name": "chromaAbCorrection",
          "typ": "[4]f32",
          "description": "Chromatic aberration correction parameters"
        }
      ],
      "description": "VrDeviceInfo, Head-Mounted-Display device parameters",
      "custom": false
    },
    {
      "name": "VrStereoConfig",
      "fields": [
        {
          "name": "projection",
          "typ": "[2]Matrix",
          "description": "VR projection matrices (per eye)"
        },
        {
          "name": "viewOffset",
          "typ": "[2]Matrix",
          "description": "VR view offset matrices (per eye)"
        },
        {
          "name": "leftLensCenter",
          "typ": "[2]f32",
          "description": "VR left lens center"
        },
        {
          "name": "rightLensCenter",
          "typ": "[2]f32",
          "description": "VR right lens center"
        },
        {
          "name": "leftScreenCenter",
          "typ": "[2]f32",
          "description": "VR left screen center"
        },
        {
          "name": "rightScreenCenter",
          "typ": "[2]f32",
          "description": "VR right screen center"
        },
        {
          "name": "scale",
          "typ": "[2]f32",
          "description": "VR distortion scale"
        },
        {
          "name": "scaleIn",
          "typ": "[2]f32",
          "description": "VR distortion scale in"
        }
      ],
      "description": "VrStereoConfig, VR stereo rendering configuration for simulator",
      "custom": false
    },
    {
      "name": "FilePathList",
      "fields": [
        {
          "name": "capacity",
          "typ": "u32",
          "description": "Filepaths max entries"
        },
        {
          "name": "count",
          "typ": "u32",
          "description": "Filepaths entries count"
        },
        {
          "name": "paths",
          "typ": "[*][*:0]u8",
          "description": "Filepaths entries"
        }
      ],
      "description": "File path list",
      "custom": false
    },
    {
      "name": "rlVertexBuffer",
      "fields": [
        {
          "name": "elementCount",
          "typ": "i32",
          "description": "Number of elements in the buffer (QUADS)"
        },
        {
          "name": "vertices",
          "typ": "[*]f32",
          "description": "Vertex position (XYZ - 3 components per vertex) (shader-location = 0)"
        },
        {
          "name": "texcoords",
          "typ": "[*]f32",
          "description": "Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)"
        },
        {
          "name": "colors",
          "typ": "[*]u8",
          "description": "Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)"
        },
        {
          "name": "indices",
          "typ": "[*]u16",
          "description": "Vertex indices (in case vertex data comes indexed) (6 indices per quad)"
        },
        {
          "name": "vaoId",
          "typ": "u32",
          "description": "OpenGL Vertex Array Object id"
        },
        {
          "name": "vboId",
          "typ": "[4]u32",
          "description": "OpenGL Vertex Buffer Objects id (4 types of vertex data)"
        }
      ],
      "description": "Dynamic vertex buffers (position + texcoords + colors + indices arrays)",
      "custom": true
    },
    {
      "name": "rlDrawCall",
      "fields": [
        {
          "name": "mode",
          "typ": "i32",
          "description": "Drawing mode: LINES, TRIANGLES, QUADS"
        },
        {
          "name": "vertexCount",
          "typ": "i32",
          "description": "Number of vertex of the draw"
        },
        {
          "name": "vertexAlignment",
          "typ": "i32",
          "description": "Number of vertex required for index alignment (LINES, TRIANGLES)"
        },
        {
          "name": "textureId",
          "typ": "u32",
          "description": "Texture id to be used on the draw -> Use to create new draw call if changes"
        }
      ],
      "description": "of those state-change happens (this is done in core module)",
      "custom": false
    },
    {
      "name": "rlRenderBatch",
      "fields": [
        {
          "name": "bufferCount",
          "typ": "i32",
          "description": "Number of vertex buffers (multi-buffering support)"
        },
        {
          "name": "currentBuffer",
          "typ": "i32",
          "description": "Current buffer tracking in case of multi-buffering"
        },
        {
          "name": "vertexBuffer",
          "typ": "?[*]rlVertexBuffer",
          "description": "Dynamic buffer(s) for vertex data"
        },
        {
          "name": "draws",
          "typ": "?[*]rlDrawCall",
          "description": "Draw calls array, depends on textureId"
        },
        {
          "name": "drawCounter",
          "typ": "i32",
          "description": "Draw calls counter"
        },
        {
          "name": "currentDepth",
          "typ": "f32",
          "description": "Current depth value for next draw"
        }
      ],
      "description": "rlRenderBatch type",
      "custom": false
    },
    {
      "name": "rlglData",
      "fields": [
        {
          "name": "currentBatch",
          "typ": "[*]rlRenderBatch",
          "description": "Current render batch"
        },
        {
          "name": "defaultBatch",
          "typ": "rlRenderBatch",
          "description": "Default internal render batch"
        },
        {
          "name": "vertexCounter",
          "typ": "i32",
          "description": "Current active render batch vertex counter (generic, used for all batches)"
        },
        {
          "name": "texcoordx, texcoordy",
          "typ": "f32",
          "description": "Current active texture coordinate (added on glVertex*())"
        },
        {
          "name": "normalx, normaly, normalz",
          "typ": "f32",
          "description": "Current active normal (added on glVertex*())"
        },
        {
          "name": "colorr, colorg, colorb, colora",
          "typ": "u8",
          "description": "Current active color (added on glVertex*())"
        },
        {
          "name": "currentMatrixMode",
          "typ": "i32",
          "description": "Current matrix mode"
        },
        {
          "name": "currentMatrix",
          "typ": "[*]Matrix",
          "description": "Current matrix pointer"
        },
        {
          "name": "modelview",
          "typ": "Matrix",
          "description": "Default modelview matrix"
        },
        {
          "name": "projection",
          "typ": "Matrix",
          "description": "Default projection matrix"
        },
        {
          "name": "transform",
          "typ": "Matrix",
          "description": "Transform matrix to be used with rlTranslate, rlRotate, rlScale"
        },
        {
          "name": "transformRequired",
          "typ": "bool",
          "description": "Require transform matrix application to current draw-call vertex (if required)"
        },
        {
          "name": "stack",
          "typ": "Matrix",
          "description": "Matrix stack for push/pop"
        },
        {
          "name": "stackCounter",
          "typ": "i32",
          "description": "Matrix stack counter"
        },
        {
          "name": "defaultTextureId",
          "typ": "u32",
          "description": "Default texture used on shapes/poly drawing (required by shader)"
        },
        {
          "name": "activeTextureId",
          "typ": "u32",
          "description": "Active texture ids to be enabled on batch drawing (0 active by default)"
        },
        {
          "name": "defaultVShaderId",
          "typ": "u32",
          "description": "Default vertex shader id (used by default shader program)"
        },
        {
          "name": "defaultFShaderId",
          "typ": "u32",
          "description": "Default fragment shader id (used by default shader program)"
        },
        {
          "name": "defaultShaderId",
          "typ": "u32",
          "description": "Default shader program id, supports vertex color and diffuse texture"
        },
        {
          "name": "defaultShaderLocs",
          "typ": "[*]i32",
          "description": "Default shader locations pointer to be used on rendering"
        },
        {
          "name": "currentShaderId",
          "typ": "u32",
          "description": "Current shader id to be used on rendering (by default, defaultShaderId)"
        },
        {
          "name": "currentShaderLocs",
          "typ": "[*]i32",
          "description": "Current shader locations pointer to be used on rendering (by default, defaultShaderLocs)"
        },
        {
          "name": "stereoRender",
          "typ": "bool",
          "description": "Stereo rendering flag"
        },
        {
          "name": "projectionStereo",
          "typ": "[2]Matrix",
          "description": "VR stereo rendering eyes projection matrices"
        },
        {
          "name": "viewOffsetStereo",
          "typ": "[2]Matrix",
          "description": "VR stereo rendering eyes view offset matrices"
        },
        {
          "name": "currentBlendMode",
          "typ": "i32",
          "description": "Blending mode active"
        },
        {
          "name": "glBlendSrcFactor",
          "typ": "i32",
          "description": "Blending source factor"
        },
        {
          "name": "glBlendDstFactor",
          "typ": "i32",
          "description": "Blending destination factor"
        },
        {
          "name": "glBlendEquation",
          "typ": "i32",
          "description": "Blending equation"
        },
        {
          "name": "framebufferWidth",
          "typ": "i32",
          "description": "Current framebuffer width"
        },
        {
          "name": "framebufferHeight",
          "typ": "i32",
          "description": "Current framebuffer height"
        }
      ],
      "description": "injected",
      "custom": true
    },
    {
      "name": "float3",
      "fields": [
        {
          "name": "v",
          "typ": "[3]f32",
          "description": ""
        }
      ],
      "description": "NOTE: Helper types to be used instead of array return types for *ToFloat functions",
      "custom": false
    },
    {
      "name": "float16",
      "fields": [
        {
          "name": "v",
          "typ": "[16]f32",
          "description": ""
        }
      ],
      "description": "",
      "custom": false
    }
  ],
  "defines": [
    {
      "name": "RAYLIB_VERSION_MAJOR",
      "typ": "i32",
      "value": "4",
      "description": "",
      "custom": false
    },
    {
      "name": "RAYLIB_VERSION_MINOR",
      "typ": "i32",
      "value": "6",
      "description": "",
      "custom": false
    },
    {
      "name": "RAYLIB_VERSION_PATCH",
      "typ": "i32",
      "value": "0",
      "description": "",
      "custom": false
    },
    {
      "name": "RAYLIB_VERSION",
      "typ": "[]const u8",
      "value": "\"4.6-dev\"",
      "description": "",
      "custom": false
    },
    {
      "name": "PI",
      "typ": "f32",
      "value": "3.14159265358979323846",
      "description": "",
      "custom": false
    },
    {
      "name": "LIGHTGRAY",
      "typ": "Color",
      "value": ".{.r=200, .g=200, .b=200, .a=255}",
      "description": "Light Gray",
      "custom": false
    },
    {
      "name": "GRAY",
      "typ": "Color",
      "value": ".{.r=130, .g=130, .b=130, .a=255}",
      "description": "Gray",
      "custom": false
    },
    {
      "name": "DARKGRAY",
      "typ": "Color",
      "value": ".{.r=80, .g=80, .b=80, .a=255}",
      "description": "Dark Gray",
      "custom": false
    },
    {
      "name": "YELLOW",
      "typ": "Color",
      "value": ".{.r=253, .g=249, .b=0, .a=255}",
      "description": "Yellow",
      "custom": false
    },
    {
      "name": "GOLD",
      "typ": "Color",
      "value": ".{.r=255, .g=203, .b=0, .a=255}",
      "description": "Gold",
      "custom": false
    },
    {
      "name": "ORANGE",
      "typ": "Color",
      "value": ".{.r=255, .g=161, .b=0, .a=255}",
      "description": "Orange",
      "custom": false
    },
    {
      "name": "PINK",
      "typ": "Color",
      "value": ".{.r=255, .g=109, .b=194, .a=255}",
      "description": "Pink",
      "custom": false
    },
    {
      "name": "RED",
      "typ": "Color",
      "value": ".{.r=230, .g=41, .b=55, .a=255}",
      "description": "Red",
      "custom": false
    },
    {
      "name": "MAROON",
      "typ": "Color",
      "value": ".{.r=190, .g=33, .b=55, .a=255}",
      "description": "Maroon",
      "custom": false
    },
    {
      "name": "GREEN",
      "typ": "Color",
      "value": ".{.r=0, .g=228, .b=48, .a=255}",
      "description": "Green",
      "custom": false
    },
    {
      "name": "LIME",
      "typ": "Color",
      "value": ".{.r=0, .g=158, .b=47, .a=255}",
      "description": "Lime",
      "custom": false
    },
    {
      "name": "DARKGREEN",
      "typ": "Color",
      "value": ".{.r=0, .g=117, .b=44, .a=255}",
      "description": "Dark Green",
      "custom": false
    },
    {
      "name": "SKYBLUE",
      "typ": "Color",
      "value": ".{.r=102, .g=191, .b=255, .a=255}",
      "description": "Sky Blue",
      "custom": false
    },
    {
      "name": "BLUE",
      "typ": "Color",
      "value": ".{.r=0, .g=121, .b=241, .a=255}",
      "description": "Blue",
      "custom": false
    },
    {
      "name": "DARKBLUE",
      "typ": "Color",
      "value": ".{.r=0, .g=82, .b=172, .a=255}",
      "description": "Dark Blue",
      "custom": false
    },
    {
      "name": "PURPLE",
      "typ": "Color",
      "value": ".{.r=200, .g=122, .b=255, .a=255}",
      "description": "Purple",
      "custom": false
    },
    {
      "name": "VIOLET",
      "typ": "Color",
      "value": ".{.r=135, .g=60, .b=190, .a=255}",
      "description": "Violet",
      "custom": false
    },
    {
      "name": "DARKPURPLE",
      "typ": "Color",
      "value": ".{.r=112, .g=31, .b=126, .a=255}",
      "description": "Dark Purple",
      "custom": false
    },
    {
      "name": "BEIGE",
      "typ": "Color",
      "value": ".{.r=211, .g=176, .b=131, .a=255}",
      "description": "Beige",
      "custom": false
    },
    {
      "name": "BROWN",
      "typ": "Color",
      "value": ".{.r=127, .g=106, .b=79, .a=255}",
      "description": "Brown",
      "custom": false
    },
    {
      "name": "DARKBROWN",
      "typ": "Color",
      "value": ".{.r=76, .g=63, .b=47, .a=255}",
      "description": "Dark Brown",
      "custom": false
    },
    {
      "name": "WHITE",
      "typ": "Color",
      "value": ".{.r=255, .g=255, .b=255, .a=255}",
      "description": "White",
      "custom": false
    },
    {
      "name": "BLACK",
      "typ": "Color",
      "value": ".{.r=0, .g=0, .b=0, .a=255}",
      "description": "Black",
      "custom": false
    },
    {
      "name": "BLANK",
      "typ": "Color",
      "value": ".{.r=0, .g=0, .b=0, .a=0}",
      "description": "Blank (Transparent)",
      "custom": false
    },
    {
      "name": "MAGENTA",
      "typ": "Color",
      "value": ".{.r=255, .g=0, .b=255, .a=255}",
      "description": "Magenta",
      "custom": false
    },
    {
      "name": "RAYWHITE",
      "typ": "Color",
      "value": ".{.r=245, .g=245, .b=245, .a=255}",
      "description": "My own White (raylib logo)",
      "custom": false
    },
    {
      "name": "RLGL_VERSION",
      "typ": "[]const u8",
      "value": "\"4.5\"",
      "description": "",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_BATCH_BUFFER_ELEMENTS",
      "typ": "i32",
      "value": "8192",
      "description": "",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_BATCH_BUFFERS",
      "typ": "i32",
      "value": "1",
      "description": "Default number of batch buffers (multi-buffering)",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_BATCH_DRAWCALLS",
      "typ": "i32",
      "value": "256",
      "description": "Default number of batch draw calls (by state changes: mode, texture)",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS",
      "typ": "i32",
      "value": "4",
      "description": "Maximum number of textures units that can be activated on batch drawing (SetShaderValueTexture())",
      "custom": false
    },
    {
      "name": "RL_MAX_MATRIX_STACK_SIZE",
      "typ": "i32",
      "value": "32",
      "description": "Maximum size of Matrix stack",
      "custom": false
    },
    {
      "name": "RL_MAX_SHADER_LOCATIONS",
      "typ": "i32",
      "value": "32",
      "description": "Maximum number of shader locations supported",
      "custom": false
    },
    {
      "name": "RL_CULL_DISTANCE_NEAR",
      "typ": "f64",
      "value": "0.01",
      "description": "Default near cull distance",
      "custom": false
    },
    {
      "name": "RL_CULL_DISTANCE_FAR",
      "typ": "f64",
      "value": "1000.0",
      "description": "Default far cull distance",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_S",
      "typ": "i32",
      "value": "10242",
      "description": "GL_TEXTURE_WRAP_S",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_T",
      "typ": "i32",
      "value": "10243",
      "description": "GL_TEXTURE_WRAP_T",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_MAG_FILTER",
      "typ": "i32",
      "value": "10240",
      "description": "GL_TEXTURE_MAG_FILTER",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_MIN_FILTER",
      "typ": "i32",
      "value": "10241",
      "description": "GL_TEXTURE_MIN_FILTER",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_NEAREST",
      "typ": "i32",
      "value": "9728",
      "description": "GL_NEAREST",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_LINEAR",
      "typ": "i32",
      "value": "9729",
      "description": "GL_LINEAR",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_MIP_NEAREST",
      "typ": "i32",
      "value": "9984",
      "description": "GL_NEAREST_MIPMAP_NEAREST",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR",
      "typ": "i32",
      "value": "9986",
      "description": "GL_NEAREST_MIPMAP_LINEAR",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST",
      "typ": "i32",
      "value": "9985",
      "description": "GL_LINEAR_MIPMAP_NEAREST",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_MIP_LINEAR",
      "typ": "i32",
      "value": "9987",
      "description": "GL_LINEAR_MIPMAP_LINEAR",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_FILTER_ANISOTROPIC",
      "typ": "i32",
      "value": "12288",
      "description": "Anisotropic filter (custom identifier)",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_MIPMAP_BIAS_RATIO",
      "typ": "i32",
      "value": "16384",
      "description": "Texture mipmap bias, percentage ratio (custom identifier)",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_REPEAT",
      "typ": "i32",
      "value": "10497",
      "description": "GL_REPEAT",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_CLAMP",
      "typ": "i32",
      "value": "33071",
      "description": "GL_CLAMP_TO_EDGE",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_MIRROR_REPEAT",
      "typ": "i32",
      "value": "33648",
      "description": "GL_MIRRORED_REPEAT",
      "custom": false
    },
    {
      "name": "RL_TEXTURE_WRAP_MIRROR_CLAMP",
      "typ": "i32",
      "value": "34626",
      "description": "GL_MIRROR_CLAMP_EXT",
      "custom": false
    },
    {
      "name": "RL_MODELVIEW",
      "typ": "i32",
      "value": "5888",
      "description": "GL_MODELVIEW",
      "custom": false
    },
    {
      "name": "RL_PROJECTION",
      "typ": "i32",
      "value": "5889",
      "description": "GL_PROJECTION",
      "custom": false
    },
    {
      "name": "RL_TEXTURE",
      "typ": "i32",
      "value": "5890",
      "description": "GL_TEXTURE",
      "custom": false
    },
    {
      "name": "RL_LINES",
      "typ": "i32",
      "value": "1",
      "description": "GL_LINES",
      "custom": false
    },
    {
      "name": "RL_TRIANGLES",
      "typ": "i32",
      "value": "4",
      "description": "GL_TRIANGLES",
      "custom": false
    },
    {
      "name": "RL_QUADS",
      "typ": "i32",
      "value": "7",
      "description": "GL_QUADS",
      "custom": false
    },
    {
      "name": "RL_UNSIGNED_BYTE",
      "typ": "i32",
      "value": "5121",
      "description": "GL_UNSIGNED_BYTE",
      "custom": false
    },
    {
      "name": "RL_FLOAT",
      "typ": "i32",
      "value": "5126",
      "description": "GL_FLOAT",
      "custom": false
    },
    {
      "name": "RL_STREAM_DRAW",
      "typ": "i32",
      "value": "35040",
      "description": "GL_STREAM_DRAW",
      "custom": false
    },
    {
      "name": "RL_STREAM_READ",
      "typ": "i32",
      "value": "35041",
      "description": "GL_STREAM_READ",
      "custom": false
    },
    {
      "name": "RL_STREAM_COPY",
      "typ": "i32",
      "value": "35042",
      "description": "GL_STREAM_COPY",
      "custom": false
    },
    {
      "name": "RL_STATIC_DRAW",
      "typ": "i32",
      "value": "35044",
      "description": "GL_STATIC_DRAW",
      "custom": false
    },
    {
      "name": "RL_STATIC_READ",
      "typ": "i32",
      "value": "35045",
      "description": "GL_STATIC_READ",
      "custom": false
    },
    {
      "name": "RL_STATIC_COPY",
      "typ": "i32",
      "value": "35046",
      "description": "GL_STATIC_COPY",
      "custom": false
    },
    {
      "name": "RL_DYNAMIC_DRAW",
      "typ": "i32",
      "value": "35048",
      "description": "GL_DYNAMIC_DRAW",
      "custom": false
    },
    {
      "name": "RL_DYNAMIC_READ",
      "typ": "i32",
      "value": "35049",
      "description": "GL_DYNAMIC_READ",
      "custom": false
    },
    {
      "name": "RL_DYNAMIC_COPY",
      "typ": "i32",
      "value": "35050",
      "description": "GL_DYNAMIC_COPY",
      "custom": false
    },
    {
      "name": "RL_FRAGMENT_SHADER",
      "typ": "i32",
      "value": "35632",
      "description": "GL_FRAGMENT_SHADER",
      "custom": false
    },
    {
      "name": "RL_VERTEX_SHADER",
      "typ": "i32",
      "value": "35633",
      "description": "GL_VERTEX_SHADER",
      "custom": false
    },
    {
      "name": "RL_COMPUTE_SHADER",
      "typ": "i32",
      "value": "37305",
      "description": "GL_COMPUTE_SHADER",
      "custom": false
    },
    {
      "name": "RL_ZERO",
      "typ": "i32",
      "value": "0",
      "description": "GL_ZERO",
      "custom": false
    },
    {
      "name": "RL_ONE",
      "typ": "i32",
      "value": "1",
      "description": "GL_ONE",
      "custom": false
    },
    {
      "name": "RL_SRC_COLOR",
      "typ": "i32",
      "value": "768",
      "description": "GL_SRC_COLOR",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_SRC_COLOR",
      "typ": "i32",
      "value": "769",
      "description": "GL_ONE_MINUS_SRC_COLOR",
      "custom": false
    },
    {
      "name": "RL_SRC_ALPHA",
      "typ": "i32",
      "value": "770",
      "description": "GL_SRC_ALPHA",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_SRC_ALPHA",
      "typ": "i32",
      "value": "771",
      "description": "GL_ONE_MINUS_SRC_ALPHA",
      "custom": false
    },
    {
      "name": "RL_DST_ALPHA",
      "typ": "i32",
      "value": "772",
      "description": "GL_DST_ALPHA",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_DST_ALPHA",
      "typ": "i32",
      "value": "773",
      "description": "GL_ONE_MINUS_DST_ALPHA",
      "custom": false
    },
    {
      "name": "RL_DST_COLOR",
      "typ": "i32",
      "value": "774",
      "description": "GL_DST_COLOR",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_DST_COLOR",
      "typ": "i32",
      "value": "775",
      "description": "GL_ONE_MINUS_DST_COLOR",
      "custom": false
    },
    {
      "name": "RL_SRC_ALPHA_SATURATE",
      "typ": "i32",
      "value": "776",
      "description": "GL_SRC_ALPHA_SATURATE",
      "custom": false
    },
    {
      "name": "RL_CONSTANT_COLOR",
      "typ": "i32",
      "value": "32769",
      "description": "GL_CONSTANT_COLOR",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_CONSTANT_COLOR",
      "typ": "i32",
      "value": "32770",
      "description": "GL_ONE_MINUS_CONSTANT_COLOR",
      "custom": false
    },
    {
      "name": "RL_CONSTANT_ALPHA",
      "typ": "i32",
      "value": "32771",
      "description": "GL_CONSTANT_ALPHA",
      "custom": false
    },
    {
      "name": "RL_ONE_MINUS_CONSTANT_ALPHA",
      "typ": "i32",
      "value": "32772",
      "description": "GL_ONE_MINUS_CONSTANT_ALPHA",
      "custom": false
    },
    {
      "name": "RL_FUNC_ADD",
      "typ": "i32",
      "value": "32774",
      "description": "GL_FUNC_ADD",
      "custom": false
    },
    {
      "name": "RL_MIN",
      "typ": "i32",
      "value": "32775",
      "description": "GL_MIN",
      "custom": false
    },
    {
      "name": "RL_MAX",
      "typ": "i32",
      "value": "32776",
      "description": "GL_MAX",
      "custom": false
    },
    {
      "name": "RL_FUNC_SUBTRACT",
      "typ": "i32",
      "value": "32778",
      "description": "GL_FUNC_SUBTRACT",
      "custom": false
    },
    {
      "name": "RL_FUNC_REVERSE_SUBTRACT",
      "typ": "i32",
      "value": "32779",
      "description": "GL_FUNC_REVERSE_SUBTRACT",
      "custom": false
    },
    {
      "name": "RL_BLEND_EQUATION",
      "typ": "i32",
      "value": "32777",
      "description": "GL_BLEND_EQUATION",
      "custom": false
    },
    {
      "name": "RL_BLEND_EQUATION_RGB",
      "typ": "i32",
      "value": "32777",
      "description": "GL_BLEND_EQUATION_RGB   // (Same as BLEND_EQUATION)",
      "custom": false
    },
    {
      "name": "RL_BLEND_EQUATION_ALPHA",
      "typ": "i32",
      "value": "34877",
      "description": "GL_BLEND_EQUATION_ALPHA",
      "custom": false
    },
    {
      "name": "RL_BLEND_DST_RGB",
      "typ": "i32",
      "value": "32968",
      "description": "GL_BLEND_DST_RGB",
      "custom": false
    },
    {
      "name": "RL_BLEND_SRC_RGB",
      "typ": "i32",
      "value": "32969",
      "description": "GL_BLEND_SRC_RGB",
      "custom": false
    },
    {
      "name": "RL_BLEND_DST_ALPHA",
      "typ": "i32",
      "value": "32970",
      "description": "GL_BLEND_DST_ALPHA",
      "custom": false
    },
    {
      "name": "RL_BLEND_SRC_ALPHA",
      "typ": "i32",
      "value": "32971",
      "description": "GL_BLEND_SRC_ALPHA",
      "custom": false
    },
    {
      "name": "RL_BLEND_COLOR",
      "typ": "i32",
      "value": "32773",
      "description": "GL_BLEND_COLOR",
      "custom": false
    },
    {
      "name": "GL_SHADING_LANGUAGE_VERSION",
      "typ": "i32",
      "value": "35724",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGB_S3TC_DXT1_EXT",
      "typ": "i32",
      "value": "33776",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT",
      "typ": "i32",
      "value": "33777",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT",
      "typ": "i32",
      "value": "33778",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT",
      "typ": "i32",
      "value": "33779",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_ETC1_RGB8_OES",
      "typ": "i32",
      "value": "36196",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGB8_ETC2",
      "typ": "i32",
      "value": "37492",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA8_ETC2_EAC",
      "typ": "i32",
      "value": "37496",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
      "typ": "i32",
      "value": "35840",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
      "typ": "i32",
      "value": "35842",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_ASTC_4x4_KHR",
      "typ": "i32",
      "value": "37808",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_COMPRESSED_RGBA_ASTC_8x8_KHR",
      "typ": "i32",
      "value": "37815",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT",
      "typ": "i32",
      "value": "34047",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_TEXTURE_MAX_ANISOTROPY_EXT",
      "typ": "i32",
      "value": "34046",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_UNSIGNED_SHORT_5_6_5",
      "typ": "i32",
      "value": "33635",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_UNSIGNED_SHORT_5_5_5_1",
      "typ": "i32",
      "value": "32820",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_UNSIGNED_SHORT_4_4_4_4",
      "typ": "i32",
      "value": "32819",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_LUMINANCE",
      "typ": "i32",
      "value": "6409",
      "description": "",
      "custom": false
    },
    {
      "name": "GL_LUMINANCE_ALPHA",
      "typ": "i32",
      "value": "6410",
      "description": "",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION",
      "typ": "[]const u8",
      "value": "\"vertexPosition\"",
      "description": "Bound by default to shader location: 0",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD",
      "typ": "[]const u8",
      "value": "\"vertexTexCoord\"",
      "description": "Bound by default to shader location: 1",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL",
      "typ": "[]const u8",
      "value": "\"vertexNormal\"",
      "description": "Bound by default to shader location: 2",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR",
      "typ": "[]const u8",
      "value": "\"vertexColor\"",
      "description": "Bound by default to shader location: 3",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT",
      "typ": "[]const u8",
      "value": "\"vertexTangent\"",
      "description": "Bound by default to shader location: 4",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2",
      "typ": "[]const u8",
      "value": "\"vertexTexCoord2\"",
      "description": "Bound by default to shader location: 5",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_MVP",
      "typ": "[]const u8",
      "value": "\"mvp\"",
      "description": "model-view-projection matrix",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW",
      "typ": "[]const u8",
      "value": "\"matView\"",
      "description": "view matrix",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION",
      "typ": "[]const u8",
      "value": "\"matProjection\"",
      "description": "projection matrix",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL",
      "typ": "[]const u8",
      "value": "\"matModel\"",
      "description": "model matrix",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL",
      "typ": "[]const u8",
      "value": "\"matNormal\"",
      "description": "normal matrix (transpose(inverse(matModelView))",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR",
      "typ": "[]const u8",
      "value": "\"colDiffuse\"",
      "description": "color diffuse (base tint color, multiplied by texture color)",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0",
      "typ": "[]const u8",
      "value": "\"texture0\"",
      "description": "texture0 (texture slot active 0)",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1",
      "typ": "[]const u8",
      "value": "\"texture1\"",
      "description": "texture1 (texture slot active 1)",
      "custom": false
    },
    {
      "name": "RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2",
      "typ": "[]const u8",
      "value": "\"texture2\"",
      "description": "texture2 (texture slot active 2)",
      "custom": false
    },
    {
      "name": "EPSILON",
      "typ": "f32",
      "value": "0.000001",
      "description": "",
      "custom": false
    }
  ]
}